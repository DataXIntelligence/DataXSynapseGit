{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dataxsynapsedev"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=dataxserver.database.windows.net;Initial Catalog=LinkTestDatabase"
		},
		"AzureTableStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureTableStorage1'"
		},
		"ShiftsMicrosoft_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'ShiftsMicrosoft'"
		},
		"TestShifts_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'TestShifts'"
		},
		"dataxsynapsedev-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataxsynapsedev-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:dataxsynapsedev.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_Dataverse_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'ls_Dataverse'"
		},
		"ls_github_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'ls_github'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsdatax01.dfs.core.windows.net/"
		},
		"ShiftsMicrosoft_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "7370627a-b1c3-4d83-baf1-5a7c35910337"
		},
		"TestShifts_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://graph.microsoft.com/beta/teams/776c5cf3-1af9-4542-b845-ff6825d85492/schedule"
		},
		"TestShifts_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "alexander.gonzalez@datax.world"
		},
		"dataxsynapsedev-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsdatax01.dfs.core.windows.net"
		},
		"ls_Dataverse_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "b47b7e20-2e2e-48d3-916e-7ffe88a71407"
		},
		"ls_github_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "alejandroperezdatax"
		},
		"ls_keyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://KeyVaultDataX.vault.azure.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pause_PowerBI_Embedded')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetCapacityDetails",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.SubscriptionId}/resourceGroups/@{pipeline().parameters.resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/@{pipeline().parameters.dedicatedCapacityName}?api-version=2021-01-01",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "Check if capacity is Active",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetCapacityDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(\n    equals(\n        activity('GetCapacityDetails').output.Properties.state, \n        'Succeeded'\n    ), \n    true , \n    false\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Pause Capacity",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.SubscriptionId}/resourceGroups/@{pipeline().parameters.resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/@{pipeline().parameters.dedicatedCapacityName}/suspend?api-version=2021-01-01",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubscriptionId": {
						"type": "string",
						"defaultValue": "b2c447f4-0f0b-471d-a130-0c72330f08f2"
					},
					"resourceGroupName": {
						"type": "string",
						"defaultValue": "DataX-ResGroup"
					},
					"dedicatedCapacityName": {
						"type": "string",
						"defaultValue": "pbimbeddedpowerpages"
					}
				},
				"folder": {
					"name": "PowerBI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pause_or_Resume_PowerBI_Embedded')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetCurrentTime",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://www.timeapi.io/api/Time/current/zone?timeZone=@{pipeline().parameters.TimeZone}",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Check current time",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetCurrentTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(\n    equals(\n        activity('GetCurrentTime').output.hour, \n        pipeline().parameters.UpTime\n    ),\n    true , \n    false\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Pause Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Pause_PowerBI_Embedded",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Resume Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Resume_PowerBI_Embedded",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubscriptionId": {
						"type": "string",
						"defaultValue": "b2c447f4-0f0b-471d-a130-0c72330f08f2"
					},
					"resourceGroupName": {
						"type": "string",
						"defaultValue": "DataX-ResGroup"
					},
					"dedicatedCapacityName": {
						"type": "string",
						"defaultValue": "pbimbeddedpowerpages"
					},
					"TimeZone": {
						"type": "string",
						"defaultValue": "Etc/UTC"
					},
					"UpTime": {
						"type": "int",
						"defaultValue": 9
					}
				},
				"variables": {
					"Time": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PowerBI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/pipelines/Pause_PowerBI_Embedded')]",
				"[concat(variables('workspaceId'), '/pipelines/Resume_PowerBI_Embedded')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0006",
								"input_file_name": "0006.Status.csv",
								"table_schema": "0006",
								"table_name": "Status",
								"table_already_exists": false
							}
						}
					},
					{
						"name": "Execute Pipeline1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0006",
								"input_file_name": "0006.DateTable.csv",
								"table_schema": "0006",
								"table_name": "DateTable",
								"table_already_exists": false
							}
						}
					},
					{
						"name": "Execute Pipeline1_copy2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0006",
								"input_file_name": "0006.Main.csv",
								"table_schema": "0006",
								"table_name": "Main",
								"table_already_exists": false
							}
						}
					},
					{
						"name": "Execute Pipeline1_copy3",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0006",
								"input_file_name": "0006.Account.csv",
								"table_schema": "0006",
								"table_name": "Account",
								"table_already_exists": false
							}
						}
					},
					{
						"name": "Execute Pipeline1_copy4",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0006",
								"input_file_name": "0006.Campaign.csv",
								"table_schema": "0006",
								"table_name": "Campaign",
								"table_already_exists": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-10T14:03:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_Overwrite_CSV_to_DW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_Mario')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy topgames to Dw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Mario_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlPoolTable_Mario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-29T12:32:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Mario_csv')]",
				"[concat(variables('workspaceId'), '/datasets/SqlPoolTable_Mario')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Portfolio 0000')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "API request info and store in Datalake",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "PortfolioDashboardsAPI",
								"type": "NotebookReference"
							},
							"parameters": {
								"reports_output_file_path": {
									"value": {
										"value": "@concat('/', pipeline().parameters.inputs_folder_path, '/', pipeline().parameters.reports_file_name)",
										"type": "Expression"
									},
									"type": "string"
								},
								"sections_output_file_path": {
									"value": {
										"value": "@concat('/', pipeline().parameters.inputs_folder_path, '/', pipeline().parameters.sections_file_name)",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "Update Reports table in Data Warehouse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "API request info and store in Datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": {
									"value": "@pipeline().parameters.inputs_folder_path",
									"type": "Expression"
								},
								"input_file_name": {
									"value": "@pipeline().parameters.reports_file_name",
									"type": "Expression"
								},
								"table_schema": {
									"value": "@pipeline().parameters.tables_schema",
									"type": "Expression"
								},
								"table_name": {
									"value": "@pipeline().parameters.reports_table_name",
									"type": "Expression"
								},
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update ReportSections table in Data Warehouse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update Reports table in Data Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": {
									"value": "@pipeline().parameters.inputs_folder_path",
									"type": "Expression"
								},
								"input_file_name": {
									"value": "@pipeline().parameters.sections_file_name",
									"type": "Expression"
								},
								"table_schema": {
									"value": "@pipeline().parameters.tables_schema",
									"type": "Expression"
								},
								"table_name": {
									"value": "@pipeline().parameters.sections_table_name",
									"type": "Expression"
								},
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputs_folder_path": {
						"type": "string",
						"defaultValue": "0000 Portfolio API"
					},
					"reports_file_name": {
						"type": "string",
						"defaultValue": "Reports.csv"
					},
					"sections_file_name": {
						"type": "string",
						"defaultValue": "ReportSections.csv"
					},
					"tables_schema": {
						"type": "string",
						"defaultValue": "0000"
					},
					"reports_table_name": {
						"type": "string",
						"defaultValue": "Reports"
					},
					"sections_table_name": {
						"type": "string",
						"defaultValue": "ReportSections"
					},
					"tables_already_exists": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-29T11:44:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/PortfolioDashboardsAPI')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_Overwrite_CSV_to_DW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Portfolio 0003 - DimTabLineItems')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy LineItems from Main to DimTab",
						"description": "It copies DV360Main[LineItem] & DV360Main[LineItemID] unique values to [0003].[DimTabDV360LineItem].\nIt will also add a new column LineItemName2 by performing a search in [0003].[LineItemName2Map].\nThe search consist on finding the first Map[value] that has Map[Key] as substring of DimTabDV360LineItem[LineItem], and assign it to DimTabDV360LineItem[LineItemName2].",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderQuery": "SELECT DISTINCT [LineItemID], [LineItem],\n(\n    SELECT TOP(1) [Value]\n    FROM [0003].[LineItemName2Map] linm\n    WHERE CHARINDEX(linm.[Key], main.LineItem ) > 0\n) AS [LineItemName2]\n\nFROM [0003].[DV360Main] main",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": {
									"value": "@{\n    if(\n        pipeline().parameters.table_already_exists,\n        'TRUNCATE TABLE [0003].[DimTabDV360LineItem]',\n        ''\n    )\n}",
									"type": "Expression"
								},
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LineItemID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LineItemID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LineItem",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LineItem",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LineItemName2",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "LineItemName2",
											"type": "Int32",
											"physicalType": "Int32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dw_DV360Main",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_DimTabDV360LineItem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"table_already_exists": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-04T11:26:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dw_DV360Main')]",
				"[concat(variables('workspaceId'), '/datasets/dw_DimTabDV360LineItem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Portfolio 0005')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data Campaign",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CountryID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CountryID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ModelServiceName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ModelServiceName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "RegionName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RegionName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "BusinessUnitName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BusinessUnitName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PSCID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PSCID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PlatformID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PlatformID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Platform_PSCID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Platform_PSCID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CampaignName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CampaignName",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_0005Campaign",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_0005Campaign",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data DateTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "yyyymmdd",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "yyyymmdd",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Day",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Day",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MonthName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MonthName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "YearMonth",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "YearMonth",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "YearMonthName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "YearMonthName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MonthCommencing",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MonthCommencing",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MonthEnding",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MonthEnding",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "WeekCommencing",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "WeekCommencing",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "WeekEnding",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "WeekEnding",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "WeekOfYear",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "WeekOfYear",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DayOfWeek",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DayOfWeek",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DayOfWeekName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DayOfWeekName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Quarter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quarter",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "YearQuarter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "YearQuarter",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_0005DateTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_0005DateTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data KPI",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Indicator",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Indicator",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Rank",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Rank",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Abbreviation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Abbreviation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Definition/Calculation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Definition/Calculation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Highlight",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Highlight",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_0005KPI",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_0005KPI",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data MergeallMedia",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Clicks",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Clicks",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Impressions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Impressions",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Spend_EUR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Spend_EUR",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PSCID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PSCID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PlatformID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PlatformID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Platform_PSCID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Platform_PSCID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Spend_Country_Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Spend_Country_Currency",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_0005MergeallMedia",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_0005MergeallMedia",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Platform",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PlatformID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PlatformID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PlatformName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PlatformName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ChannelGroupingSimple",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ChannelGroupingSimple",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_0005Platform",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_0005Platform",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data CampaignSpecialTag",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "GroupName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GroupName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "GroupID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GroupID",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_0005CampaignSpecialTag",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_0005CampaignSpecialTag",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T10:51:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/df_0005Campaign')]",
				"[concat(variables('workspaceId'), '/datasets/dw_0005Campaign')]",
				"[concat(variables('workspaceId'), '/datasets/df_0005DateTable')]",
				"[concat(variables('workspaceId'), '/datasets/dw_0005DateTable')]",
				"[concat(variables('workspaceId'), '/datasets/df_0005KPI')]",
				"[concat(variables('workspaceId'), '/datasets/dw_0005KPI')]",
				"[concat(variables('workspaceId'), '/datasets/df_0005MergeallMedia')]",
				"[concat(variables('workspaceId'), '/datasets/dw_0005MergeallMedia')]",
				"[concat(variables('workspaceId'), '/datasets/df_0005Platform')]",
				"[concat(variables('workspaceId'), '/datasets/dw_0005Platform')]",
				"[concat(variables('workspaceId'), '/datasets/df_0005CampaignSpecialTag')]",
				"[concat(variables('workspaceId'), '/datasets/dw_0005CampaignSpecialTag')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Portfolio 0007')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Upload Agency to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Split Excel sheets into CSV files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Agency.csv",
								"table_schema": "0007",
								"table_name": "Agency",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Candidate to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Agency to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Candidate.csv",
								"table_schema": "0007",
								"table_name": "Candidate",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Client to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Candidate to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Client.csv",
								"table_schema": "0007",
								"table_name": "Client",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload ClientType to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Client to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "ClientType.csv",
								"table_schema": "0007",
								"table_name": "ClientType",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload ClientTypeGroup to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload ClientType to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "ClientTypeGroup.csv",
								"table_schema": "0007",
								"table_name": "ClientTypeGroup",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload ContractType to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload ClientTypeGroup to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "ContractType.csv",
								"table_schema": "0007",
								"table_name": "ContractType",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Date to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload ContractType to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Date.csv",
								"table_schema": "0007",
								"table_name": "Date",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Department to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Date to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Department.csv",
								"table_schema": "0007",
								"table_name": "Department",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload DR to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Department to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "DR.csv",
								"table_schema": "0007",
								"table_name": "DR",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Industry to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload DR to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Industry.csv",
								"table_schema": "0007",
								"table_name": "Industry",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Media to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Industry to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Media.csv",
								"table_schema": "0007",
								"table_name": "Media",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Occupation to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Media to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Occupation.csv",
								"table_schema": "0007",
								"table_name": "Occupation",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload OfferType to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Occupation to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "OfferType.csv",
								"table_schema": "0007",
								"table_name": "OfferType",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Region to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload OfferType to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Region.csv",
								"table_schema": "0007",
								"table_name": "Region",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload TargetProfile to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Region to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "TargetProfile.csv",
								"table_schema": "0007",
								"table_name": "TargetProfile",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Split Excel sheets into CSV files",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Split Excel sheets as CSV files",
								"type": "NotebookReference"
							},
							"parameters": {
								"input_file_path": {
									"value": "/0007/CandidateDatabaseV1.xlsx",
									"type": "string"
								},
								"output_directory_path": {
									"value": "/0007/Splitted files/",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "Upload Channel to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload TargetProfile to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Channel.csv",
								"table_schema": "0007",
								"table_name": "Channel",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Publication to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Channel to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Publication.csv",
								"table_schema": "0007",
								"table_name": "Publication",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload Application to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Publication to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "Application.csv",
								"table_schema": "0007",
								"table_name": "Application",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Upload JobOffer to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Upload Application to DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": "0007/Splitted files",
								"input_file_name": "JobOffer.csv",
								"table_schema": "0007",
								"table_name": "JobOffer",
								"table_already_exists": {
									"value": "@pipeline().parameters.tables_already_exists",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tables_already_exists": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-03T12:35:48Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_Overwrite_CSV_to_DW')]",
				"[concat(variables('workspaceId'), '/notebooks/Split Excel sheets as CSV files')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBI Metadata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Groups",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "isReadOnly",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isreadonly",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "isOnDedicatedCapacity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isondedicatedcapacity",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "capacityId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_capacityid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_groupsid",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Groups",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "GroupsDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy ActivityEvemts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RecordType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_recordtype",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CreationTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_creationtime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Operation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_operation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OrganizationId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_organizationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UserType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_usertype",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "UserKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_userkey",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Workload",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_workload",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UserId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_userid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ClientIP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_clientip",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UserAgent",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_useragent",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Activity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_activity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ItemName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_itemname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "WorkSpaceName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_workspacename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CapacityId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_capacityid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CapacityName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_capacityname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "WorkspaceId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_workspaceid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ObjectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_objectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DataflowId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dataflowid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DataflowName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dataflowname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DataflowAccessTokenRequestParameters",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dataflowaccesstokenrequestparameters",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IsSuccess",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_issuccess",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "DataflowType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dataflowtype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RequestId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_requestid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ActivityId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_activityid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ResourceId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resourceid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ExportEventStartDateTimeParameter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_exporteventstartdatetimeparameter",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ExportEventEndDateTimeParameter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_exporteventenddatetimeparameter",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DatasetName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasetname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ReportName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_reportname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DatasetId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasetid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ReportId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_reportid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ArtifactId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_artifactid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ArtifactName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_artifactname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ReportType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_reporttype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DistributionMethod",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_distributionmethod",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ConsumptionMethod",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_consumptionmethod",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ArtifactKind",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_artifactkind",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ModelsSnapshots",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_modelssnapshots",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "HasFullReportAttachment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_hasfullreportattachment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GatewayId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_gatewayid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DatasourceId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasourceid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DataflowRefreshScheduleType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dataflowrefreshscheduletype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DataConnectivityMode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dataconnectivitymode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_refreshtype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastRefreshTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_lastrefreshtime",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ExportEventActivityTypeParameter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_exporteventactivitytypeparameter",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DashboardName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dashboardname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DashboardId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_dashboardid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Datasets",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasets",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ImportId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_importid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ImportSource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_importsource",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ImportType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_importtype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ImportDisplayName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_importdisplayname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FolderObjectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_folderobjectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FolderDisplayName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_folderdisplayname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FolderAccessRequests",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_folderaccessrequests",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AppName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_appname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AppReportId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_appreportid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AppId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_appid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TemplateAppObjectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_templateappobjectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TemplatePackageName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_templatepackagename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TemplateAppVersion",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_templateappversion",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TemplateAppOwnerTenantObjectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_templateappownertenantobjectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TemplateAppFolderObjectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_templateappfolderobjectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IsUpdateAppActivity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isupdateappactivity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IsTemplateAppFromMarketplace",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_istemplateappfrommarketplace",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TemplateAppIsInstalledWithAutomation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_templateappisinstalledwithautomation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Schedules",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_schedules",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CustomVisualAccessTokenResourceId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_customvisualaccesstokenresourceid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CustomVisualAccessTokenSiteUri",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_customvisualaccesstokensiteuri",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmbedTokenId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_embedtokenid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ArtifactObjectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_artifactobjectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ResultStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resultstatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ObjectType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_objecttype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ObjectDisplayName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_objectdisplayname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Experience",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_experience",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AggregatedWorkspaceInformation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_aggregatedworkspaceinformation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "InPlaceSharingEnabled",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_inplacesharingenabled",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IsTenantAdminApi",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_istenantadminapi",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GatewayClusters",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_gatewayclusters",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_activityeventsid",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Activity_Events",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ActivityEventsDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Datasources",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "datasourceType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "datasourceId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasourceid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "gatewayId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_gatewayid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "resource_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resource_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_group_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "resource_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resource_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasourcesid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "emailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_emailaddress",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "server",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_server",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_path",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sharePointSiteUrl",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_sharepointsiteurl",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "url",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_url",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "extensionDataSourceKind",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_extensiondatasourcekind",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "extensionDataSourcePath",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_extensiondatasourcepath",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "database",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_database",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "kind",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_kind",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Datasources",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasourcesDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy RefreshHistory",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "requestId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_requestid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "refreshType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_refreshtype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "startTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_starttime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "endTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_endtime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_status",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "resource_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resource_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_group_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "resource_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resource_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "serviceExceptionJson",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_serviceexceptionjson",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_refreshhistoryid",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RefreshHistory",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RefreshHistoryDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy ReportPages",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "displayName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_displayname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_order",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "report_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_report_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_group_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_reportpagesid",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ReportPages",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ReportPagesDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Resources",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "webUrl",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_weburl",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "addRowsAPIEnabled",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_addrowsapienabled",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "configuredBy",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_configuredby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "isRefreshable",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isrefreshable",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "isEffectiveIdentityRequired",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_iseffectiveidentityrequired",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "isEffectiveIdentityRolesRequired",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_iseffectiveidentityrolesrequired",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "targetStorageMode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_targetstoragemode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_createddate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "createReportEmbedURL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_createreportembedurl",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "qnaEmbedURL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_qnaembedurl",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "upstreamDatasets",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_upstreamdatasets",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "users",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_users",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "queryScaleOutSettings",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_queryscaleoutsettings",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_group_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "objectId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_objectid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_description",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "reportType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_reporttype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "embedUrl",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_embedurl",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "isFromPbix",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isfrompbix",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "isOwnedByMe",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isownedbyme",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "datasetId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasetid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "datasetWorkspaceId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_datasetworkspaceid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "subscriptions",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_subscriptions",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "isOnPremGatewayRequired",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_isonpremgatewayrequired",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_resourcesid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "import_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_import_name",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Resources",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ResourcesDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Users",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "emailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_emailaddress",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "groupUserAccessRight",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_groupuseraccessright",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "displayName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_displayname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "identifier",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_identifier",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "principalType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_principaltype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_group_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_usersid",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UsersDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Data",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "PBIMetadata",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {},
							"driverSize": "Small"
						}
					},
					{
						"name": "Delete Records",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Update Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PBIMetadata Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GroupsSource": {},
									"ActivityEventsSource": {},
									"DatasourcesSource": {},
									"RefreshHistorySource": {},
									"ReportPagesSource": {},
									"ResourcesSource": {},
									"UsersSource": {},
									"GroupsSink": {},
									"ActivityEventsSink": {},
									"DatasourcesSink": {},
									"RefreshHistorySink": {},
									"ReportPagesSink": {},
									"ResourcesSink": {},
									"UsersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "String",
						"defaultValue": "test"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Groups')]",
				"[concat(variables('workspaceId'), '/datasets/GroupsDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/Activity_Events')]",
				"[concat(variables('workspaceId'), '/datasets/ActivityEventsDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/Datasources')]",
				"[concat(variables('workspaceId'), '/datasets/DatasourcesDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/RefreshHistory')]",
				"[concat(variables('workspaceId'), '/datasets/RefreshHistoryDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/ReportPages')]",
				"[concat(variables('workspaceId'), '/datasets/ReportPagesDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/Resources')]",
				"[concat(variables('workspaceId'), '/datasets/ResourcesDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/Users')]",
				"[concat(variables('workspaceId'), '/datasets/UsersDataverse')]",
				"[concat(variables('workspaceId'), '/notebooks/PBIMetadata')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/PBIMetadata Test')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Resume_PowerBI_Embedded')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetCapacityDetails",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.SubscriptionId}/resourceGroups/@{pipeline().parameters.resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/@{pipeline().parameters.dedicatedCapacityName}?api-version=2021-01-01",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "Check if capacity is Paused",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetCapacityDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(\n    equals(\n        activity('GetCapacityDetails').output.Properties.state, \n        'Paused'\n    ), \n    true , \n    false\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Resume Capacity",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.SubscriptionId}/resourceGroups/@{pipeline().parameters.resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/@{pipeline().parameters.dedicatedCapacityName}/resume?api-version=2021-01-01",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubscriptionId": {
						"type": "string",
						"defaultValue": "b2c447f4-0f0b-471d-a130-0c72330f08f2"
					},
					"resourceGroupName": {
						"type": "string",
						"defaultValue": "DataX-ResGroup"
					},
					"dedicatedCapacityName": {
						"type": "string",
						"defaultValue": "pbimbeddedpowerpages"
					}
				},
				"folder": {
					"name": "PowerBI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Shifts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://graph.microsoft.com/beta/teams/776c5cf3-1af9-4542-b845-ff6825d85492/schedule",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "89248974-515e-4d65-9469-ab424abfd2d2",
								"password": {
									"type": "SecureString",
									"value": "**********"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-22T17:30:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Test')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy ReportPages",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "displayName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_displayname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_order",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "report_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_report_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_group_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Id_duplicate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cr64d_reportpagesid",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ReportPages",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ReportPagesDataverse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ReportPages')]",
				"[concat(variables('workspaceId'), '/datasets/ReportPagesDataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Twitch Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadVideoData",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Copy Streams Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "LoadVideoData",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "LoadStreamsData",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "pl_Pause_or_Resume_Pool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "LoadStreamsData",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Copy Streams Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LoadStreamsData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": "TRUNCATE TABLE Twitch.Streams",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "user_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_login",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "user_login",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "user_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "game_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "game_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "game_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "game_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "viewer_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "viewer_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "started_at",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "started_at",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "thumbnail_url",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "thumbnail_url",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "is_mature",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "is_mature",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Streams",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "StreamsTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Games Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LoadVideoData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": "TRUNCATE TABLE Twitch.Games",
								"writeBehavior": "Insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "box_art_url",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "box_art_url",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GamesData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "GamesTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Videos Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LoadVideoData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": "TRUNCATE TABLE Twitch.Videos",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "stream_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "stream_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "user_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_login",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "user_login",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "user_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "published_at",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "published_at",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "url",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "url",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "thumbnail_url",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "thumbnail_url",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "view_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "view_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "duration",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "duration",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "game_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "game_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VideoDataCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "VideosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "pl_Pause_or_Resume_Pool",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PLParAction": "Resume",
								"PLParWaitTimeUntil": 20
							}
						}
					},
					{
						"name": "pl_Pause_or_Resume_Pool1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Videos Data",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Copy Games Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Twitch"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-03T11:02:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/LoadVideoData')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]",
				"[concat(variables('workspaceId'), '/notebooks/LoadStreamsData')]",
				"[concat(variables('workspaceId'), '/datasets/Streams')]",
				"[concat(variables('workspaceId'), '/datasets/StreamsTable')]",
				"[concat(variables('workspaceId'), '/datasets/GamesData')]",
				"[concat(variables('workspaceId'), '/datasets/GamesTable')]",
				"[concat(variables('workspaceId'), '/datasets/VideoDataCSV')]",
				"[concat(variables('workspaceId'), '/datasets/VideosTable')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_Pause_or_Resume_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Twitch Streamer Data Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadStreamersData",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "pl_Pause_or_Resume_Pool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "LoadStreamersData",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Copy Streamers Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LoadStreamersData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": "TRUNCATE TABLE Twitch.Streamers",
								"writeBehavior": "Insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Streamers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "StreamersTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "pl_Pause_or_Resume_Pool",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PLParAction": "Resume",
								"PLParWaitTimeUntil": 20
							}
						}
					},
					{
						"name": "pl_Pause_or_Resume_Pool1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Streamers Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Twitch"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/LoadStreamersData')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]",
				"[concat(variables('workspaceId'), '/datasets/Streamers')]",
				"[concat(variables('workspaceId'), '/datasets/StreamersTable')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_Pause_or_Resume_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_Overwrite_CSV_to_DW')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy output to DW",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Resume DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": {
									"value": "@{if(\r\n    pipeline().parameters.table_already_exists,\r\n    concat(\r\n        'TRUNCATE TABLE [', \r\n        pipeline().parameters.table_schema, \r\n        '].[', \r\n        pipeline().parameters.table_name, \r\n        ']'\r\n    ),\r\n    ''\r\n)\r\n}",
									"type": "Expression"
								},
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "df_Anonymization_pl_Source",
								"type": "DatasetReference",
								"parameters": {
									"file_system": "dataxsynapsefs",
									"folder_path": {
										"value": "@pipeline().parameters.input_folder_path",
										"type": "Expression"
									},
									"file_name": {
										"value": "@pipeline().parameters.input_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dw_Anonymization_pl_Sink",
								"type": "DatasetReference",
								"parameters": {
									"table_schema": {
										"value": "@pipeline().parameters.table_schema",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Resume DW",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PLParAction": "Resume"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"input_folder_path": {
						"type": "string",
						"defaultValue": "Anonymization Tool Tests"
					},
					"input_file_name": {
						"type": "string",
						"defaultValue": "sales-campaigns-anonymized.csv"
					},
					"table_schema": {
						"type": "string",
						"defaultValue": "test"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "pl_upload_test"
					},
					"table_already_exists": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Other"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-29T11:43:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/df_Anonymization_pl_Source')]",
				"[concat(variables('workspaceId'), '/datasets/dw_Anonymization_pl_Sink')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_Pause_or_Resume_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_PauseDW_Daily_18UTC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Pause DW",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait 15 Minutes",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Pause DW",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 900
						}
					},
					{
						"name": "Pause DW II",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait 15 Minutes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait 15 Minutes II",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Pause DW II",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 900
						}
					},
					{
						"name": "Pause DW III",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait 15 Minutes II",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Pause_or_Resume_Pool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Other"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-10T13:20:48Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_Pause_or_Resume_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_Pause_or_Resume_Pool')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Until pool is Paused or Online",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(bool(startswith(activity('Check for changed SQLPool Status').Output.Properties.status,'Paused')),Bool(startswith(activity('Check for changed SQLPool Status').Output.Properties.status,'Online')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check for changed SQLPool Status",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.PLParSubscriptionID}/resourceGroups/@{pipeline().parameters.PLParSynapse_ResourceGroupName}/providers/Microsoft.Synapse/workspaces/@{pipeline().parameters.PLParSynapseWorkspace}/sqlPools/@{pipeline().parameters.PLParSynapseDedicatedSQLPool}/?api-version=2019-06-01-preview",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								},
								{
									"name": "Wait before checking again",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Check for changed SQLPool Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.PLParWaitTimeUntil",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:20:00"
						}
					},
					{
						"name": "Check if SQL Pool is Paused or Online",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until pool is Paused or Online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(\n    equals(activity('Check for changed SQLPool Status').Output.Properties.status, \n        if(equals(pipeline().parameters.PLParAction, 'Resume'), \n            'Online',\n            'Paused'\n        )\n    )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Pause or Resume SQL",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.PLParSubscriptionID}/resourceGroups/@{pipeline().parameters.PLParSynapse_ResourceGroupName}/providers/Microsoft.Synapse/workspaces/@{pipeline().parameters.PLParSynapseWorkspace}/sqlPools/@{pipeline().parameters.PLParSynapseDedicatedSQLPool}/@{pipeline().parameters.PLParAction}/?api-version=2019-06-01-preview",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								},
								{
									"name": "Wait before Continue",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Pause or Resume SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.PLParWaitTime",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PLParAction": {
						"type": "string",
						"defaultValue": "Pause"
					},
					"PLParWaitTime": {
						"type": "int",
						"defaultValue": 10
					},
					"PLParWaitTimeUntil": {
						"type": "int",
						"defaultValue": 30
					},
					"PLParSynapse_ResourceGroupName": {
						"type": "string",
						"defaultValue": "DataX-ResGroup"
					},
					"PLParSynapseWorkspace": {
						"type": "string",
						"defaultValue": "dataxsynapsedev"
					},
					"PLParSynapseDedicatedSQLPool": {
						"type": "string",
						"defaultValue": "DataXDW"
					},
					"PLParSubscriptionId": {
						"type": "string",
						"defaultValue": "b2c447f4-0f0b-471d-a130-0c72330f08f2"
					}
				},
				"folder": {
					"name": "Other"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-22T14:28:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_anonymize_excel_and_upload_to_DW')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dataset Anonymization Tool",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Dataset Anonymization Tool",
								"type": "NotebookReference"
							},
							"parameters": {
								"input_file_path": {
									"value": {
										"value": "@concat('/', pipeline().parameters.input_folder_path, '/', pipeline().parameters.input_file_name)",
										"type": "Expression"
									},
									"type": "string"
								},
								"output_file_path": {
									"value": {
										"value": "@concat('/', pipeline().parameters.output_folder_path, '/', pipeline().parameters.output_file_name)",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "Upload anonymized file to DW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dataset Anonymization Tool",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Overwrite_CSV_to_DW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"input_folder_path": {
									"value": "@pipeline().parameters.output_folder_path",
									"type": "Expression"
								},
								"input_file_name": {
									"value": "@pipeline().parameters.output_file_name",
									"type": "Expression"
								},
								"table_schema": {
									"value": "@pipeline().parameters.table_schema",
									"type": "Expression"
								},
								"table_name": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								},
								"table_already_exists": {
									"value": "@pipeline().parameters.table_already_exists",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"input_folder_path": {
						"type": "string",
						"defaultValue": "Anonymization Tool Tests"
					},
					"input_file_name": {
						"type": "string",
						"defaultValue": "sales-campaigns-formatted.xlsx"
					},
					"output_folder_path": {
						"type": "string",
						"defaultValue": "Anonymization Tool Tests"
					},
					"output_file_name": {
						"type": "string",
						"defaultValue": "sales-campaigns-anonymized.csv"
					},
					"table_schema": {
						"type": "string",
						"defaultValue": "test"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "pl_upload_test"
					},
					"table_already_exists": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Other"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-29T11:43:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Dataset Anonymization Tool')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_Overwrite_CSV_to_DW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_refreshServ')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Call dataset refresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get AAD Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://api.powerbi.com/v1.0/myorg/groups/@{pipeline().parameters.workspaceGuid}/datasets/@{pipeline().parameters.datasetGuid}/refreshes",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Get AAD Token').output.token_type),' ',string(activity('Get AAD Token').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"notifyOption": "NoNotification"
							}
						}
					},
					{
						"name": "Until dataset refresh completion",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Call dataset refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(first(json(string(activity('Get dataset refresh status').output)).value).status,'Unknown'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait 60 seconds",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								},
								{
									"name": "Get dataset refresh status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait 60 seconds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.workspaceGuid,'/datasets/',pipeline().parameters.datasetGuid,'/refreshes?$top=1')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat(string(activity('Get AAD Token').output.token_type),' ',string(activity('Get AAD Token').output.access_token))",
												"type": "Expression"
											},
											"Content-Type": "application/json"
										}
									}
								}
							],
							"timeout": "0.03:00:00"
						}
					},
					{
						"name": "If dataset refresh failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until dataset refresh completion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(first(json(string(activity('Get dataset refresh status').output)).value).status,'Failed')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "SaveErrorMessages",
									"description": "In case of an error in processing of the dataset, the actual messages are saved in the pipeline variable \"ProcessingErrors\".",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ProcessingErrors",
										"value": {
											"value": "@json(first(json(string(activity('Get dataset refresh status').output)).value).serviceExceptionJson).errorDescription",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get AAD Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Secret from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://login.microsoftonline.com/@{pipeline().parameters.TenantId}/oauth2/token",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id=@{pipeline().parameters.SPClientId}&client_secret=@{activity('Get Secret from AKV').output.value}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Secret from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://KeyVaultDataX.vault.azure.net/secrets/PBIServPrincipalAPISecret?api-version=7.0",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TenantId": {
						"type": "String",
						"defaultValue": "89248974-515e-4d65-9469-ab424abfd2d2"
					},
					"SPClientId": {
						"type": "String",
						"defaultValue": "95e2c30e-8533-4c18-b3c7-4718847e9f28"
					},
					"workspaceGuid": {
						"type": "string",
						"defaultValue": "ac1176e8-1b38-40d3-91e4-3b8f5983aa5f"
					},
					"datasetGuid": {
						"type": "string",
						"defaultValue": "713b120c-7dc2-42bf-b9da-7e5391e251ca"
					}
				},
				"variables": {
					"ProcessingErrors": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PowerBI"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-13T11:55:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ActivityEventsDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_activityevents"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity_Events')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ActivityEvents.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "RecordType",
						"type": "String"
					},
					{
						"name": "CreationTime",
						"type": "String"
					},
					{
						"name": "Operation",
						"type": "String"
					},
					{
						"name": "OrganizationId",
						"type": "String"
					},
					{
						"name": "UserType",
						"type": "String"
					},
					{
						"name": "UserKey",
						"type": "String"
					},
					{
						"name": "Workload",
						"type": "String"
					},
					{
						"name": "UserId",
						"type": "String"
					},
					{
						"name": "ClientIP",
						"type": "String"
					},
					{
						"name": "UserAgent",
						"type": "String"
					},
					{
						"name": "Activity",
						"type": "String"
					},
					{
						"name": "ItemName",
						"type": "String"
					},
					{
						"name": "WorkSpaceName",
						"type": "String"
					},
					{
						"name": "CapacityId",
						"type": "String"
					},
					{
						"name": "CapacityName",
						"type": "String"
					},
					{
						"name": "WorkspaceId",
						"type": "String"
					},
					{
						"name": "ObjectId",
						"type": "String"
					},
					{
						"name": "DataflowId",
						"type": "String"
					},
					{
						"name": "DataflowName",
						"type": "String"
					},
					{
						"name": "DataflowAccessTokenRequestParameters",
						"type": "String"
					},
					{
						"name": "IsSuccess",
						"type": "String"
					},
					{
						"name": "DataflowType",
						"type": "String"
					},
					{
						"name": "RequestId",
						"type": "String"
					},
					{
						"name": "ActivityId",
						"type": "String"
					},
					{
						"name": "ResourceId",
						"type": "String"
					},
					{
						"name": "ExportEventStartDateTimeParameter",
						"type": "String"
					},
					{
						"name": "ExportEventEndDateTimeParameter",
						"type": "String"
					},
					{
						"name": "DatasetName",
						"type": "String"
					},
					{
						"name": "ReportName",
						"type": "String"
					},
					{
						"name": "DatasetId",
						"type": "String"
					},
					{
						"name": "ReportId",
						"type": "String"
					},
					{
						"name": "ArtifactId",
						"type": "String"
					},
					{
						"name": "ArtifactName",
						"type": "String"
					},
					{
						"name": "ReportType",
						"type": "String"
					},
					{
						"name": "DistributionMethod",
						"type": "String"
					},
					{
						"name": "ConsumptionMethod",
						"type": "String"
					},
					{
						"name": "ArtifactKind",
						"type": "String"
					},
					{
						"name": "ModelsSnapshots",
						"type": "String"
					},
					{
						"name": "HasFullReportAttachment",
						"type": "String"
					},
					{
						"name": "GatewayId",
						"type": "String"
					},
					{
						"name": "DatasourceId",
						"type": "String"
					},
					{
						"name": "DataflowRefreshScheduleType",
						"type": "String"
					},
					{
						"name": "DataConnectivityMode",
						"type": "String"
					},
					{
						"name": "RefreshType",
						"type": "String"
					},
					{
						"name": "LastRefreshTime",
						"type": "String"
					},
					{
						"name": "ExportEventActivityTypeParameter",
						"type": "String"
					},
					{
						"name": "DashboardName",
						"type": "String"
					},
					{
						"name": "DashboardId",
						"type": "String"
					},
					{
						"name": "Datasets",
						"type": "String"
					},
					{
						"name": "ImportId",
						"type": "String"
					},
					{
						"name": "ImportSource",
						"type": "String"
					},
					{
						"name": "ImportType",
						"type": "String"
					},
					{
						"name": "ImportDisplayName",
						"type": "String"
					},
					{
						"name": "FolderObjectId",
						"type": "String"
					},
					{
						"name": "FolderDisplayName",
						"type": "String"
					},
					{
						"name": "FolderAccessRequests",
						"type": "String"
					},
					{
						"name": "AppName",
						"type": "String"
					},
					{
						"name": "AppReportId",
						"type": "String"
					},
					{
						"name": "AppId",
						"type": "String"
					},
					{
						"name": "TemplateAppObjectId",
						"type": "String"
					},
					{
						"name": "TemplatePackageName",
						"type": "String"
					},
					{
						"name": "TemplateAppVersion",
						"type": "String"
					},
					{
						"name": "TemplateAppOwnerTenantObjectId",
						"type": "String"
					},
					{
						"name": "TemplateAppFolderObjectId",
						"type": "String"
					},
					{
						"name": "IsUpdateAppActivity",
						"type": "String"
					},
					{
						"name": "IsTemplateAppFromMarketplace",
						"type": "String"
					},
					{
						"name": "TemplateAppIsInstalledWithAutomation",
						"type": "String"
					},
					{
						"name": "Schedules",
						"type": "String"
					},
					{
						"name": "CustomVisualAccessTokenResourceId",
						"type": "String"
					},
					{
						"name": "CustomVisualAccessTokenSiteUri",
						"type": "String"
					},
					{
						"name": "EmbedTokenId",
						"type": "String"
					},
					{
						"name": "ArtifactObjectId",
						"type": "String"
					},
					{
						"name": "ResultStatus",
						"type": "String"
					},
					{
						"name": "ObjectType",
						"type": "String"
					},
					{
						"name": "ObjectDisplayName",
						"type": "String"
					},
					{
						"name": "Experience",
						"type": "String"
					},
					{
						"name": "AggregatedWorkspaceInformation",
						"type": "String"
					},
					{
						"name": "InPlaceSharingEnabled",
						"type": "String"
					},
					{
						"name": "IsTenantAdminApi",
						"type": "String"
					},
					{
						"name": "GatewayClusters",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Datasources')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Datasources.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "datasourceType",
						"type": "String"
					},
					{
						"name": "datasourceId",
						"type": "String"
					},
					{
						"name": "gatewayId",
						"type": "String"
					},
					{
						"name": "resource_id",
						"type": "String"
					},
					{
						"name": "group_id",
						"type": "String"
					},
					{
						"name": "resource_type",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "emailAddress",
						"type": "String"
					},
					{
						"name": "server",
						"type": "String"
					},
					{
						"name": "path",
						"type": "String"
					},
					{
						"name": "sharePointSiteUrl",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					},
					{
						"name": "extensionDataSourceKind",
						"type": "String"
					},
					{
						"name": "extensionDataSourcePath",
						"type": "String"
					},
					{
						"name": "database",
						"type": "String"
					},
					{
						"name": "kind",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DatasourcesDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_datasources"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Streamers.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Streams.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TopGames.json",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "{\"data\":[{\"id\":\"509658\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Just Chatting\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509658-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}3",
						"type": "String"
					},
					{
						"name": "{\"id\":\"322503446\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Resident Evil 4\"5",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/322503446_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"132181\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"21779\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"League of Legends\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/21779-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"115\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"32399\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Counter-Strike: Global Offensive\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/32399_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1372\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"516575\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"VALORANT\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/516575-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"126459\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"32982\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Grand Theft Auto V\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/32982_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1020\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"27471\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Minecraft\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/27471_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"121\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"29595\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Dota 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/29595-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"2963\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"511224\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Apex Legends\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/511224-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"114795\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"515024\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Diablo IV\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/515024-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"125165\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"33214\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Fortnite\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/33214-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1905\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"513143\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Teamfight Tactics\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/513143-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"120176\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"18122\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"World of Warcraft\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/18122-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"123\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1890315333\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Counter-Strike 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1890315333_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"242408\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"509672\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Travel \\u0026 Outdoors\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509672-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}59",
						"type": "String"
					},
					{
						"name": "{\"id\":\"515025\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Overwatch 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/515025-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"125174\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"509667\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Food \\u0026 Drink\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509667-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}67",
						"type": "String"
					},
					{
						"name": "{\"id\":\"491931\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Escape from Tarkov\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/491931_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"15536\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"512710\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Call of Duty: Warzone\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/512710-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"131800\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"27546\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"World of Tanks\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/27546-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1184\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"490100\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Lost Ark\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/490100-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"26128\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"498566\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Slots\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/498566-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}87",
						"type": "String"
					},
					{
						"name": "{\"id\":\"26936\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Music\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/26936-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}91",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1745202732\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"FIFA 23\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1745202732_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"205780\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"29452\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Virtual Casino\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/29452_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"45517\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"417528\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Albion Online\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/417528_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"19698\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"138585\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Hearthstone\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/138585_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1279\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"491487\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Dead by Daylight\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/491487-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"18866\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"504798\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"FIFA Online 4\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/504798_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"93902\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"497057\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Destiny 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/497057-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"25657\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"493057\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"PUBG: BATTLEGROUNDS\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/493057-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"27789\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"518203\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Sports\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/518203-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}127",
						"type": "String"
					},
					{
						"name": "{\"id\":\"509660\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Art\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509660-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}131",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1678052513\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Call of Duty: Modern Warfare II\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1678052513-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"200165\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"513181\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Genshin Impact\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/513181_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"119277\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1016442748\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"MLB The Show 23\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1016442748_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"230593\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"512953\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"ELDEN RING\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/512953_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"119133\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"263490\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Rust\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/263490_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"3277\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"459931\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Old School RuneScape\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/459931_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"79824\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"509659\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"ASMR\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509659-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}159",
						"type": "String"
					},
					{
						"name": "{\"id\":\"65632\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"DayZ\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/65632_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"2117\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1468\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Resident Evil 4\"165",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1468_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"974\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"375960865\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Have a Nice Death\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/375960865_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"185241\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"19976\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"MapleStory\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/19976_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"9804\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"743\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Chess\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/743-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}179",
						"type": "String"
					},
					{
						"name": "{\"id\":\"2748\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Magic: The Gathering\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/2748-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}183",
						"type": "String"
					},
					{
						"name": "{\"id\":\"417752\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Talk Shows \\u0026 Podcasts\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/417752-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}187",
						"type": "String"
					},
					{
						"name": "{\"id\":\"511399\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Super Mario Maker 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/511399_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"115276\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"490377\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Sea of Thieves\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/490377-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"11137\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"510202\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Contraband Police\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/510202_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"76263\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1095275650\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Hogwarts Legacy\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1095275650_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"136625\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"717087827\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Hoosegow\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/717087827_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"207213\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"30921\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Rocket League\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/30921-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"11198\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"508509\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Codenames\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/508509_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"105254\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"71375\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Star Citizen\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/71375_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1595\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"24241\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"FINAL FANTASY XIV ONLINE\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/24241_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"386\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"490422\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"StarCraft II\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/490422-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}227",
						"type": "String"
					},
					{
						"name": "{\"id\":\"460630\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Tom Clancy's Rainbow Six Siege\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/460630_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"7360\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"515467\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Watch Parties\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/515467-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}235",
						"type": "String"
					},
					{
						"name": "{\"id\":\"27284\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Retro\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/27284-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}239",
						"type": "String"
					},
					{
						"name": "{\"id\":\"386821\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Black Desert\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/386821_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"6292\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1158884259\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Splatoon 3\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1158884259_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"143613\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"499003\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"VRChat\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/499003_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"33615\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"498592\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"I'm Only Sleeping\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/498592_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"71001\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"19619\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Tibia\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/19619_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"9596\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"32502\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"World of Warships\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/32502_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"5587\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1119642287\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Yu-Gi-Oh! Master Duel\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1119642287_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"159298\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"488190\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Poker\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/488190-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}271",
						"type": "String"
					},
					{
						"name": "{\"id\":\"32507\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"SMITE\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/32507-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"5607\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1743359147\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"MARVEL SNAP\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1743359147_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"202279\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"499634\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Crypto\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/499634-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"76760\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"66082\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Games + Demos\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/66082-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}287",
						"type": "String"
					},
					{
						"name": "{\"id\":\"13389\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Age of Empires II\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/13389-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}291",
						"type": "String"
					},
					{
						"name": "{\"id\":\"500188\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Hunt: Showdown\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/500188_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"7291\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"670867987\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Pok�mon Scarlet/Violet\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/670867987-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}299",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1885922279\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Summoners War: Chronicles\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1885922279_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"194702\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"272263131\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Animals",
						"type": "String"
					},
					{
						"name": " Aquariums",
						"type": "String"
					},
					{
						"name": " and Zoos\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/272263131-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}309",
						"type": "String"
					},
					{
						"name": "{\"id\":\"515349\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Lineage II\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/515349_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"2971\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"515479\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Sons of the Forest\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/515479_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"127346\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1913410799\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Total War: WARHAMMER III\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1913410799_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"143114\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"12839\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Heroes of Might and Magic III: The Restoration of Erathia\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/12839_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"364\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"517159\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Guilty Gear: Strive\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/517159_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"125764\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"461067\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Tekken 7\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/461067_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"7498\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"19357\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Guild Wars 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/19357_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1183\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"509670\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Science \\u0026 Technology\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509670-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"\"}341",
						"type": "String"
					},
					{
						"name": "{\"id\":\"508455\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Valheim\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/508455_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"104967\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"65654\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"The Elder Scrolls Online\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/65654_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1081\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"772421245\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"NBA 2K23\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/772421245_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"207393\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"493959\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Red Dead Redemption 2\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/493959_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"25076\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1202244044\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Atelier Ryza 3: Alchemist of the End \\u0026 the Secret Key\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1202244044_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"217558\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"514858\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"League of Legends: Wild Rift\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/514858-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"124700\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"509482\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Judgment\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/509482_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"109274\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"29307\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Path of Exile\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/29307_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"1911\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"5492\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Diablo\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/5492_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"125\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"508402\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Live\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/508402_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"85682\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"504461\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Super Smash Bros. Ultimate\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/504461_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"90101\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"1040463021\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"WWE 2K23\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/1040463021_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"233028\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"489635\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"ARK: Survival Evolved\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/489635-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"10239\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"23020\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"ROBLOX\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/23020_IGDB-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"17269\"}",
						"type": "String"
					},
					{
						"name": "{\"id\":\"512980\"",
						"type": "String"
					},
					{
						"name": "\"name\":\"Fall Guys\"",
						"type": "String"
					},
					{
						"name": "\"box_art_url\":\"https://static-cdn.jtvnw.net/ttv-boxart/512980-{width}x{height}.jpg\"",
						"type": "String"
					},
					{
						"name": "\"igdb_id\":\"119313\"}]",
						"type": "String"
					},
					{
						"name": "\"pagination\":{\"cursor\":\"eyJzIjoxMDAsImQiOmZhbHNlLCJ0Ijp0cnVlfQ==\"}}",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AllTopGames.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "stream_id",
						"type": "String"
					},
					{
						"name": "user_id",
						"type": "String"
					},
					{
						"name": "user_login",
						"type": "String"
					},
					{
						"name": "user_name",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					},
					{
						"name": "created_at",
						"type": "String"
					},
					{
						"name": "published_at",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					},
					{
						"name": "thumbnail_url",
						"type": "String"
					},
					{
						"name": "viewable",
						"type": "String"
					},
					{
						"name": "view_count",
						"type": "String"
					},
					{
						"name": "language",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "String"
					},
					{
						"name": "muted_segments",
						"type": "String"
					},
					{
						"name": "game_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GamesData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TopGames.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "box_art_url",
						"type": "String"
					},
					{
						"name": "igdb_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GamesDataCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TopGames.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "box_art_url",
						"type": "String"
					},
					{
						"name": "igdb_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GamesTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Games"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Groups')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Groups.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "isReadOnly",
						"type": "String"
					},
					{
						"name": "isOnDedicatedCapacity",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "capacityId",
						"type": "String"
					},
					{
						"name": "defaultDatasetStorageFormat",
						"type": "String"
					},
					{
						"name": "id_duplicate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GroupsDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_groups"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Mario_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TopGames2.csv",
						"folderPath": "Training/Mario",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "box_art_url",
						"type": "String"
					},
					{
						"name": "igdb_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RefreshHistory')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "RefreshHistory.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "requestId",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "refreshType",
						"type": "String"
					},
					{
						"name": "startTime",
						"type": "String"
					},
					{
						"name": "endTime",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "resource_id",
						"type": "String"
					},
					{
						"name": "group_id",
						"type": "String"
					},
					{
						"name": "resource_type",
						"type": "String"
					},
					{
						"name": "serviceExceptionJson",
						"type": "String"
					},
					{
						"name": "id_duplicate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RefreshHistoryDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_refreshhistory"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReportPages')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ReportPages.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "displayName",
						"type": "String"
					},
					{
						"name": "order",
						"type": "String"
					},
					{
						"name": "report_id",
						"type": "String"
					},
					{
						"name": "group_id",
						"type": "String"
					},
					{
						"name": "Id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReportPagesDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_reportpages"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Resources')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Resources.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "webUrl",
						"type": "String"
					},
					{
						"name": "addRowsAPIEnabled",
						"type": "String"
					},
					{
						"name": "configuredBy",
						"type": "String"
					},
					{
						"name": "isRefreshable",
						"type": "String"
					},
					{
						"name": "isEffectiveIdentityRequired",
						"type": "String"
					},
					{
						"name": "isEffectiveIdentityRolesRequired",
						"type": "String"
					},
					{
						"name": "targetStorageMode",
						"type": "String"
					},
					{
						"name": "createdDate",
						"type": "String"
					},
					{
						"name": "createReportEmbedURL",
						"type": "String"
					},
					{
						"name": "qnaEmbedURL",
						"type": "String"
					},
					{
						"name": "upstreamDatasets",
						"type": "String"
					},
					{
						"name": "users",
						"type": "String"
					},
					{
						"name": "queryScaleOutSettings",
						"type": "String"
					},
					{
						"name": "group_id",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "objectId",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					},
					{
						"name": "reportType",
						"type": "String"
					},
					{
						"name": "embedUrl",
						"type": "String"
					},
					{
						"name": "isFromPbix",
						"type": "String"
					},
					{
						"name": "isOwnedByMe",
						"type": "String"
					},
					{
						"name": "datasetId",
						"type": "String"
					},
					{
						"name": "datasetWorkspaceId",
						"type": "String"
					},
					{
						"name": "subscriptions",
						"type": "String"
					},
					{
						"name": "isOnPremGatewayRequired",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ResourcesDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_resources"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Lisseth",
					"table": "Brand"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "TopVideos"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "TopGames"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Streams"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable5')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Streamers"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable_Mario')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Mario",
					"table": "TopGames"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Streamers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "StreamersData.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "login",
						"type": "String"
					},
					{
						"name": "display_name",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "broadcaster_type",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					},
					{
						"name": "profile_image_url",
						"type": "String"
					},
					{
						"name": "offline_image_url",
						"type": "String"
					},
					{
						"name": "view_count",
						"type": "String"
					},
					{
						"name": "created_at",
						"type": "String"
					},
					{
						"name": "language",
						"type": "String"
					},
					{
						"name": "followers",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StreamersTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Streamers"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Streams')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Streams.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "user_id",
						"type": "String"
					},
					{
						"name": "user_login",
						"type": "String"
					},
					{
						"name": "user_name",
						"type": "String"
					},
					{
						"name": "game_id",
						"type": "String"
					},
					{
						"name": "game_name",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "viewer_count",
						"type": "String"
					},
					{
						"name": "started_at",
						"type": "String"
					},
					{
						"name": "language",
						"type": "String"
					},
					{
						"name": "thumbnail_url",
						"type": "String"
					},
					{
						"name": "tag_ids",
						"type": "String"
					},
					{
						"name": "tags",
						"type": "String"
					},
					{
						"name": "is_mature",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StreamsCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Streams.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "user_id",
						"type": "String"
					},
					{
						"name": "user_login",
						"type": "String"
					},
					{
						"name": "user_name",
						"type": "String"
					},
					{
						"name": "game_id",
						"type": "String"
					},
					{
						"name": "game_name",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "viewer_count",
						"type": "String"
					},
					{
						"name": "started_at",
						"type": "String"
					},
					{
						"name": "language",
						"type": "String"
					},
					{
						"name": "thumbnail_url",
						"type": "String"
					},
					{
						"name": "tag_ids",
						"type": "String"
					},
					{
						"name": "tags",
						"type": "String"
					},
					{
						"name": "is_mature",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StreamsTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Streams"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StreamsTable2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Streams"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TopGames')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "TopGames"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Users')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Users.csv",
						"folderPath": "PBIMetadata",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emailAddress",
						"type": "String"
					},
					{
						"name": "groupUserAccessRight",
						"type": "String"
					},
					{
						"name": "displayName",
						"type": "String"
					},
					{
						"name": "identifier",
						"type": "String"
					},
					{
						"name": "principalType",
						"type": "String"
					},
					{
						"name": "group_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UsersDataverse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr64d_users"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VideoDataCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AllTopGames.csv",
						"folderPath": "Training/Cristian",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VideosTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Twitch",
					"table": "Videos"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_0005Campaign')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0005.Campaign.csv",
						"folderPath": "0005",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CountryID;ModelServiceName;RegionName;BusinessUnitName;PSCID;PlatformID;Platform_PSCID;CampaignName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_0005CampaignSpecialTag')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0005.CampaignSpecialTag.csv",
						"folderPath": "0005",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "GroupName",
						"type": "String"
					},
					{
						"name": "GroupID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_0005DateTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0005.DateTable.csv",
						"folderPath": "0005",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "yyyymmdd",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					},
					{
						"name": "Day",
						"type": "String"
					},
					{
						"name": "MonthName",
						"type": "String"
					},
					{
						"name": "YearMonth",
						"type": "String"
					},
					{
						"name": "YearMonthName",
						"type": "String"
					},
					{
						"name": "MonthCommencing",
						"type": "String"
					},
					{
						"name": "MonthEnding",
						"type": "String"
					},
					{
						"name": "WeekCommencing",
						"type": "String"
					},
					{
						"name": "WeekEnding",
						"type": "String"
					},
					{
						"name": "WeekOfYear",
						"type": "String"
					},
					{
						"name": "DayOfWeek",
						"type": "String"
					},
					{
						"name": "DayOfWeekName",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "YearQuarter",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_0005KPI')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0005.KPI.csv",
						"folderPath": "0005",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Indicator",
						"type": "String"
					},
					{
						"name": "Rank",
						"type": "String"
					},
					{
						"name": "Abbreviation",
						"type": "String"
					},
					{
						"name": "Definition/Calculation",
						"type": "String"
					},
					{
						"name": "Highlight",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_0005MergeallMedia')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0005.MergeallMedia.csv",
						"folderPath": "0005",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date;Clicks;Impressions;Spend_EUR;PSCID;PlatformID;Platform_PSCID;Spend_Country_Currency",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_0005Platform')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0005.Platform.csv",
						"folderPath": "0005",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PlatformID",
						"type": "String"
					},
					{
						"name": "PlatformName",
						"type": "String"
					},
					{
						"name": "ChannelGroupingSimple",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Anonymization_pl_Source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_system": {
						"type": "string",
						"defaultValue": "dataxsynapsefs"
					},
					"folder_path": {
						"type": "string",
						"defaultValue": "<path>/<directory_name>"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "<file_name>"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().file_system",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "invoiceId",
						"type": "String"
					},
					{
						"name": "previousInvoiceId",
						"type": "String"
					},
					{
						"name": "billingAccountId",
						"type": "String"
					},
					{
						"name": "billingAccountName",
						"type": "String"
					},
					{
						"name": "billingProfileId",
						"type": "String"
					},
					{
						"name": "billingProfileName",
						"type": "String"
					},
					{
						"name": "invoiceSectionId",
						"type": "String"
					},
					{
						"name": "invoiceSectionName",
						"type": "String"
					},
					{
						"name": "resellerName",
						"type": "String"
					},
					{
						"name": "resellerMpnId",
						"type": "String"
					},
					{
						"name": "costCenter",
						"type": "String"
					},
					{
						"name": "billingPeriodEndDate",
						"type": "String"
					},
					{
						"name": "billingPeriodStartDate",
						"type": "String"
					},
					{
						"name": "servicePeriodEndDate",
						"type": "String"
					},
					{
						"name": "servicePeriodStartDate",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "serviceFamily",
						"type": "String"
					},
					{
						"name": "productOrderId",
						"type": "String"
					},
					{
						"name": "productOrderName",
						"type": "String"
					},
					{
						"name": "consumedService",
						"type": "String"
					},
					{
						"name": "meterId",
						"type": "String"
					},
					{
						"name": "meterName",
						"type": "String"
					},
					{
						"name": "meterCategory",
						"type": "String"
					},
					{
						"name": "meterSubCategory",
						"type": "String"
					},
					{
						"name": "meterRegion",
						"type": "String"
					},
					{
						"name": "ProductId",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "SubscriptionId",
						"type": "String"
					},
					{
						"name": "subscriptionName",
						"type": "String"
					},
					{
						"name": "publisherType",
						"type": "String"
					},
					{
						"name": "publisherId",
						"type": "String"
					},
					{
						"name": "publisherName",
						"type": "String"
					},
					{
						"name": "resourceGroupName",
						"type": "String"
					},
					{
						"name": "ResourceId",
						"type": "String"
					},
					{
						"name": "resourceLocation",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "effectivePrice",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					},
					{
						"name": "unitOfMeasure",
						"type": "String"
					},
					{
						"name": "chargeType",
						"type": "String"
					},
					{
						"name": "billingCurrency",
						"type": "String"
					},
					{
						"name": "pricingCurrency",
						"type": "String"
					},
					{
						"name": "costInBillingCurrency",
						"type": "String"
					},
					{
						"name": "costInPricingCurrency",
						"type": "String"
					},
					{
						"name": "costInUsd",
						"type": "String"
					},
					{
						"name": "paygCostInBillingCurrency",
						"type": "String"
					},
					{
						"name": "paygCostInUsd",
						"type": "String"
					},
					{
						"name": "exchangeRatePricingToBilling",
						"type": "String"
					},
					{
						"name": "exchangeRateDate",
						"type": "String"
					},
					{
						"name": "isAzureCreditEligible",
						"type": "String"
					},
					{
						"name": "serviceInfo1",
						"type": "String"
					},
					{
						"name": "serviceInfo2",
						"type": "String"
					},
					{
						"name": "additionalInfo",
						"type": "String"
					},
					{
						"name": "tags",
						"type": "String"
					},
					{
						"name": "PayGPrice",
						"type": "String"
					},
					{
						"name": "frequency",
						"type": "String"
					},
					{
						"name": "term",
						"type": "String"
					},
					{
						"name": "reservationId",
						"type": "String"
					},
					{
						"name": "reservationName",
						"type": "String"
					},
					{
						"name": "pricingModel",
						"type": "String"
					},
					{
						"name": "unitPrice",
						"type": "String"
					},
					{
						"name": "costAllocationRuleName",
						"type": "String"
					},
					{
						"name": "benefitId",
						"type": "String"
					},
					{
						"name": "benefitName",
						"type": "String"
					},
					{
						"name": "provider",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_Brand_Javi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Brand.csv",
						"folderPath": "Training/Javier",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BrandId",
						"type": "String"
					},
					{
						"name": "BrandName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_DWCountry_Lisseth')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Lisseth",
					"table": "Country"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_DW_GoogleAds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Lisseth",
					"table": "GoogleAds"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_allCountries_Javier')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "allCountries.csv",
						"folderPath": "Training/Javier",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "alpha-2",
						"type": "String"
					},
					{
						"name": "alpha-3",
						"type": "String"
					},
					{
						"name": "country-code",
						"type": "String"
					},
					{
						"name": "iso_3166-2",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "sub-region",
						"type": "String"
					},
					{
						"name": "intermediate-region",
						"type": "String"
					},
					{
						"name": "region-code",
						"type": "String"
					},
					{
						"name": "sub-region-code",
						"type": "String"
					},
					{
						"name": "intermediate-region-code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_allCountries_lisseth')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "allCountries.csv",
						"folderPath": "Training/Lisseth",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "alpha-2",
						"type": "String"
					},
					{
						"name": "alpha-3",
						"type": "String"
					},
					{
						"name": "country-code",
						"type": "String"
					},
					{
						"name": "iso_3166-2",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "sub-region",
						"type": "String"
					},
					{
						"name": "intermediate-region",
						"type": "String"
					},
					{
						"name": "region-code",
						"type": "String"
					},
					{
						"name": "sub-region-code",
						"type": "String"
					},
					{
						"name": "intermediate-region-code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_brand_lisseth')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataxsynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Brand.csv",
						"folderPath": "Training/Lisseth",
						"fileSystem": "dataxsynapsefs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BrandId",
						"type": "String"
					},
					{
						"name": "BrandName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dataxsynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dwBrand_Javi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "Javi",
					"table": "Brand"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_0005Campaign')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0005",
					"table": "Campaign"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_0005CampaignSpecialTag')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0005",
					"table": "CampaignSpecialTag"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_0005DateTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0005",
					"table": "DateTable"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_0005KPI')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0005",
					"table": "KPI"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_0005MergeallMedia')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0005",
					"table": "MergeallMedia"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_0005Platform')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0005",
					"table": "Platform"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_Anonymization_pl_Sink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"table_schema": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().table_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_DV360Main')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "Ad_Type",
						"type": "nvarchar"
					},
					{
						"name": "Creative_Type",
						"type": "nvarchar"
					},
					{
						"name": "Impressions",
						"type": "nvarchar"
					},
					{
						"name": "Clicks",
						"type": "nvarchar"
					},
					{
						"name": "Total_Conversions",
						"type": "nvarchar"
					},
					{
						"name": "First_Quartile_Views_Video",
						"type": "nvarchar"
					},
					{
						"name": "Midpoint_Views_Video",
						"type": "nvarchar"
					},
					{
						"name": "Third_Quartile_Views_Video",
						"type": "nvarchar"
					},
					{
						"name": "Complete_Views_Video",
						"type": "nvarchar"
					},
					{
						"name": "YouTube__Views",
						"type": "nvarchar"
					},
					{
						"name": "spend_EUR",
						"type": "nvarchar"
					},
					{
						"name": "PSCID",
						"type": "nvarchar"
					},
					{
						"name": "Platform_PSCID",
						"type": "nvarchar"
					},
					{
						"name": "LineItem",
						"type": "nvarchar"
					},
					{
						"name": "LineItemID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "0003",
					"table": "DV360Main"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw_DimTabDV360LineItem')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "0003",
					"table": "DimTabDV360LineItem"
				},
				"sqlPool": {
					"referenceName": "DataXDW",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/DataXDW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntimeTestAle",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntimeTestAle')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureTableStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureTableStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ShiftsMicrosoft')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Office365",
				"typeProperties": {
					"office365TenantId": "89248974-515e-4d65-9469-ab424abfd2d2",
					"servicePrincipalTenantId": "89248974-515e-4d65-9469-ab424abfd2d2",
					"servicePrincipalId": "[parameters('ShiftsMicrosoft_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('ShiftsMicrosoft_servicePrincipalKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestShifts')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "OData",
				"typeProperties": {
					"url": "[parameters('TestShifts_properties_typeProperties_url')]",
					"authenticationType": "Basic",
					"userName": "[parameters('TestShifts_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('TestShifts_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataxsynapsedev-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dataxsynapsedev-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataxsynapsedev-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dataxsynapsedev-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_Dataverse')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://org6fc1a113.crm4.dynamics.com",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalId": "[parameters('ls_Dataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('ls_Dataverse_servicePrincipalCredential')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_github')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('ls_github_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('ls_github_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIlNZTkFQU0VARDk1N0RBMTUtNUFDOC00QzIwLThBMkYtQTA3MTU3QjZEQjZBXzRkN2ZkMmYwLTVmNWEtNDNjZi1hZGQ0LTQwN2IzZWE5ZmE3MyINCn0="
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_keyvault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_keyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PauseDW_Dialy_18UTC')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_PauseDW_Daily_18UTC",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-10T13:19:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_PauseDW_Daily_18UTC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Power BI Metadata')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PowerBI Metadata",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 30,
						"startTime": "2023-05-12T23:50:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								50
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PowerBI Metadata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Suspend_or_Resume_PBI_Embedded')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pause_or_Resume_PowerBI_Embedded",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-15T13:25:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								9,
								17
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Pause_or_Resume_PowerBI_Embedded')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger_m')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline_Mario",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 2,
						"startTime": "2023-03-29T12:19:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								20
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Pipeline_Mario')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TwitchGeneralDataTrigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Updates the data once a day. Estimate run time = 1 min",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Twitch Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-04-04T11:01:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								11
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Twitch Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TwitchStreamerDataTrigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Updates the data once per week. Estimate run time = 35 - 60 min",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Twitch Streamer Data Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-04-04T11:06:00Z",
						"endTime": "2023-04-06T11:55:27Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								2
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Twitch Streamer Data Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_PauseDW')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_Pause_or_Resume_Pool",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 6,
						"startTime": "2023-05-11T09:56:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_Pause_or_Resume_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntimeTestAle')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PBIMetadata Test')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GroupsDataverse",
								"type": "DatasetReference"
							},
							"name": "GroupsSource"
						},
						{
							"dataset": {
								"referenceName": "ActivityEventsDataverse",
								"type": "DatasetReference"
							},
							"name": "ActivityEventsSource"
						},
						{
							"dataset": {
								"referenceName": "DatasourcesDataverse",
								"type": "DatasetReference"
							},
							"name": "DatasourcesSource"
						},
						{
							"dataset": {
								"referenceName": "RefreshHistoryDataverse",
								"type": "DatasetReference"
							},
							"name": "RefreshHistorySource"
						},
						{
							"dataset": {
								"referenceName": "ReportPagesDataverse",
								"type": "DatasetReference"
							},
							"name": "ReportPagesSource"
						},
						{
							"dataset": {
								"referenceName": "ResourcesDataverse",
								"type": "DatasetReference"
							},
							"name": "ResourcesSource"
						},
						{
							"dataset": {
								"referenceName": "UsersDataverse",
								"type": "DatasetReference"
							},
							"name": "UsersSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GroupsDataverse",
								"type": "DatasetReference"
							},
							"name": "GroupsSink"
						},
						{
							"dataset": {
								"referenceName": "ActivityEventsDataverse",
								"type": "DatasetReference"
							},
							"name": "ActivityEventsSink"
						},
						{
							"dataset": {
								"referenceName": "DatasourcesDataverse",
								"type": "DatasetReference"
							},
							"name": "DatasourcesSink"
						},
						{
							"dataset": {
								"referenceName": "RefreshHistoryDataverse",
								"type": "DatasetReference"
							},
							"name": "RefreshHistorySink"
						},
						{
							"dataset": {
								"referenceName": "ReportPagesDataverse",
								"type": "DatasetReference"
							},
							"name": "ReportPagesSink"
						},
						{
							"dataset": {
								"referenceName": "ResourcesDataverse",
								"type": "DatasetReference"
							},
							"name": "ResourcesSink"
						},
						{
							"dataset": {
								"referenceName": "UsersDataverse",
								"type": "DatasetReference"
							},
							"name": "UsersSink"
						}
					],
					"transformations": [
						{
							"name": "AlterRowGroups"
						},
						{
							"name": "AlterRowActivityEvents"
						},
						{
							"name": "AlterRowDatasources"
						},
						{
							"name": "AlterRowRefreshHistory"
						},
						{
							"name": "AlterRowReportPages"
						},
						{
							"name": "AlterRowResources"
						},
						{
							"name": "AlterRowUsers"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> GroupsSource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> ActivityEventsSource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> DatasourcesSource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> RefreshHistorySource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> ReportPagesSource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> ResourcesSource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false) ~> UsersSource",
						"GroupsSource alterRow(deleteIf(true())) ~> AlterRowGroups",
						"ActivityEventsSource alterRow(deleteIf(true())) ~> AlterRowActivityEvents",
						"DatasourcesSource alterRow(deleteIf(true())) ~> AlterRowDatasources",
						"RefreshHistorySource alterRow(deleteIf(true())) ~> AlterRowRefreshHistory",
						"ReportPagesSource alterRow(deleteIf(true())) ~> AlterRowReportPages",
						"ResourcesSource alterRow(deleteIf(true())) ~> AlterRowResources",
						"UsersSource alterRow(deleteIf(true())) ~> AlterRowUsers",
						"AlterRowGroups sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0) ~> GroupsSink",
						"AlterRowActivityEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ActivityEventsSink",
						"AlterRowDatasources sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DatasourcesSink",
						"AlterRowRefreshHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RefreshHistorySink",
						"AlterRowReportPages sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReportPagesSink",
						"AlterRowResources sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ResourcesSink",
						"AlterRowUsers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> UsersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GroupsDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/ActivityEventsDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/DatasourcesDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/RefreshHistoryDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/ReportPagesDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/ResourcesDataverse')]",
				"[concat(variables('workspaceId'), '/datasets/UsersDataverse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Portfolio 0007 - Create views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- CREATE VIEW [0007].[V_Client] AS\n--     SELECT c.*, ct.[ClientTypeName], ct.[ClientTypeGroupID], ctg.[ClientTypeGroupName]\n--     FROM [0007].[Client] c\n--     LEFT JOIN [0007].[ClientType] ct\n--     ON c.[ClientTypeID] = ct.[ClientTypeID]\n--     LEFT JOIN [0007].[ClientTypeGroup] ctg\n--     ON ct.[ClientTypeGroupID] = ctg.[ClientTypeGroupID]\n\n-- CREATE VIEW [0007].[V_Agency] AS\n--     SELECT a.*, d.[DepartmentName], d.[RegionID], r.[RegionName], r.[DRID], dr.[DRName]\n--     FROM [0007].[Agency] a\n--     LEFT JOIN [0007].[Department] d\n--     ON a.[DepartmentID] = d.[DepartmentID]\n--     LEFT JOIN [0007].[Region] r\n--     ON d.[RegionID] = r.[RegionID]\n--     LEFT JOIN [0007].[DR] dr\n--     ON r.[DRID] = dr.[DRID]\n\n-- CREATE VIEW [0007].[V_Publication] AS\n--     SELECT p.*, m.[MediaName], m.[PriorityID]\n--     FROM [0007].[Publication] p\n--     LEFT JOIN [0007].[Media] m\n--     ON CAST(p.[MediaID] AS NUMERIC) = CAST(m.[MediaID] AS NUMERIC)\n\n-- CREATE VIEW [0007].[V_Application] AS\n--     SELECT a.*, c.[CandidateName]\n--     FROM [0007].[Application] a\n--     LEFT JOIN [0007].[Candidate] c\n--     ON CAST(a.[CandidateID] AS NUMERIC) = CAST(c.[CandidateID] AS NUMERIC)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Twitch Games')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Twitch"
				},
				"content": {
					"query": "-- ALTER TABLE [Twitch].[Games]\n-- DROP COLUMN igdb_id;\n\n\nSELECT *\n FROM [Twitch].[Games]\n\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Twitch Streamers')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Twitch"
				},
				"content": {
					"query": "/*SELECT [id], [login], [display_name], [view_count], [created_at], [language], [followers]\nFROM [Twitch].[Streamers]\nWHERE [login] IN (\n  SELECT [login] \n  FROM [Twitch].[Streamers] \n  GROUP BY [login] \n  HAVING COUNT(*) > 1\n);*/\n\n-- ALTER TABLE [Twitch].[Streamers]\n-- DROP COLUMN type, broadcaster_type;\n\nSELECT *\nFROM [Twitch].[Streamers]\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Twitch Streams')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Twitch"
				},
				"content": {
					"query": "ALTER TABLE [Twitch].[Streams]\nDROP COLUMN type, tag_ids, tags;\n\n-- ALTER TABLE [Twitch].[Streams] ADD type VARCHAR;\n-- ALTER TABLE [Twitch].[Streams] ADD tags_ids VARCHAR;\n-- ALTER TABLE [Twitch].[Streams] ADD tags VARCHAR;\n\n\nSELECT TOP (100) *\n FROM [Twitch].[Streams]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Twitch Videos')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Twitch"
				},
				"content": {
					"query": "-- ALTER TABLE [Twitch].[Videos]\n-- DROP COLUMN viewable, type, muted_segments;\n\nSELECT TOP (100) [id]\n,[stream_id]\n,[user_id]\n,[user_login]\n,[user_name]\n,[title]\n,[description]\n,[created_at]\n,[published_at]\n,[url]\n,[thumbnail_url]\n-- ,[viewable]\n,[view_count]\n,[language]\n-- ,[type]\n ,[duration]\n-- ,[muted_segments]\n,[game_id]\n FROM [Twitch].[Videos]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = '[GoogleAdsCampaign]' AND O.TYPE = 'U' AND S.NAME = '[0002]')\nCREATE TABLE [0002].[GoogleAdsCampaign]\n\t(\n\t [Date] date,\n\t [Campaign State] nvarchar(4000),\n\t [Campaign Type] nvarchar(4000),\n\t [Impressions] bigint,\n\t [Clicks] bigint,\n\t [Campaign Name] nvarchar(4000),\n\t [Taxonomy Check] nvarchar(4000),\n\t [Business Unit] nvarchar(4000),\n\t [Spend EUR] bigint,\n\t [Platform Name] bigint,\n\t [Unique ID] bigint,\n\t [PSCID] bigint,\n\t [Platform PSCID] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t HEAP\n\t -- CLUSTERED COLUMNSTORE INDEX\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_[GoogleAdsCampaign]\n--AS\n--BEGIN\nCOPY INTO [0002].[GoogleAdsCampaign]\n(Date 1, [Campaign State] 2, [Campaign Type] 3, Impressions 4, Clicks 5, [Campaign Name] 6, [Taxonomy Check] 7, [Business Unit] 8, [Spend EUR] 9, [Platform Name] 10, [Unique ID] 11, PSCID 12, [Platform PSCID] 13)\nFROM 'https://adlsdatax01.dfs.core.windows.net/dataxsynapsefs/0002/0002.GoogleAdsCampaign.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,DATEFORMAT = 'dmy'\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://adlsdatax01.dfs.core.windows.net/dataxsynapsefs/0002/'\n)\n--END\nGO\n\nSELECT TOP 100 * FROM [0002].[GoogleAdsCampaign]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    DISTINCT CAMPAIGN\nFROM\n    OPENROWSET(\n        BULK 'https://adlsdatax01.dfs.core.windows.net/dataxsynapsefs/Training/Lisseth/GoogleAds.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROC [dbo].[Update_Country_Brand]\nAS\nBEGIN\nUPDATE lgads\nSET \n    lgads.CountryID = lc.CountryName,\n    lgads.BrandID = lb.BrandName\nFROM [Lisseth].[GoogleAds] lgads\nLEFT JOIN [Lisseth].[Country]  lc ON lgads.CountryID = lc.CountryID\nLEFT JOIN [Lisseth].[Brand]  lb ON lgads.BrandID = lb.BrandID\nEND\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[name]\n,[box_art_url]\n,[igdb_id]\n FROM [Mario].[TopGames] WHERE igdb_id IS NOT NULL\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE USER Mario FOR LOGIN Mario\n\nGRANT SELECT ON Mario.v_topgames TO Mario\n\nEXECUTE AS USER='Mario'\n\nSELECT * FROM Mario.topgames",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[stream_id]\n,[user_id]\n,[user_login]\n,[user_name]\n,[title]\n,[description]\n,[created_at]\n,[published_at]\n,[url]\n,[thumbnail_url]\n,[viewable]\n,[view_count]\n,[language]\n,[type]\n,[duration]\n,[muted_segments]\n,[game_id]\n FROM [Twitch].[Videos]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Update_Columns_Values')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "UPDATE lgads\nSET \n    lgads.CountryID = lc.CountryName,\n    lgads.BrandID = lb.BrandName\nFROM [Lisseth].[GoogleAds] lgads\nLEFT JOIN [Lisseth].[Country]  lc ON lgads.CountryID = lc.CountryID\nLEFT JOIN [Lisseth].[Brand]  lb ON lgads.BrandID = lb.BrandID",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataXDW",
						"poolName": "DataXDW"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AddUserToGroupTest')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4a967cce-fa88-4d56-93f2-8bfc28bed437"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import requests\r\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"client_id = '87a84244-3d41-4d6f-9530-c943df302149'\r\n",
							"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'TestAzureAdSecret')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data = f'client_id={client_id}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&client_secret={client_secret}&grant_type=client_credentials'"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"r = requests.post('https://login.microsoftonline.com/89248974-515e-4d65-9469-ab424abfd2d2/oauth2/v2.0/token', data=data)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"access_token = r.json()['access_token']"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"header = {'Authorization': f'Bearer {access_token}', 'Content-type':'application/json'}"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = f'https://graph.microsoft.com/v1.0/groups/0c419912-6f55-4229-b600-47423b2ae220/members/$ref'\r\n",
							"data = \"\"\"\r\n",
							"{\r\n",
							"  \"@odata.id\": \"https://graph.microsoft.com/v1.0/users/sebastian.tamayo@datax.world\"\r\n",
							"}\r\n",
							"\"\"\""
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"r= requests.post(url, data = data, headers=header)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"r.text"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge Ryte - Anonymize Dataset')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8881b5b4-bef7-4683-afed-5cd7434c4f4d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"import pandas as pd\r\n",
							"import random"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Import initial data from input file"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"data_df = pd.read_excel('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Ryte challenge/Data to sanitize.xlsx', sheet_name='Data')\r\n",
							"country_df = pd.read_excel('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Ryte challenge/Data to sanitize.xlsx', sheet_name='Country')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Remove non needed columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data_df = data_df[['Last Updated', 'Country Code', 'Market', 'Region', 'Critical Error','Critical Error Count', 'What is Indexible', 'What is Indexible Count','Indexability Status Codes', 'Indexability Status Codes Count', 'Redirect to Header Status Codes', 'Redirect to Header Status Codes Count','Links Status Code Count', 'Server Load Time', 'Server Load Time Count','Meta Title Pixel Length', 'Meta Title Pixel Length Count', 'Meta Title Duplicates', 'Meta Title Duplicates Count', 'Outgoing Links', 'Outgoing Links Count', 'Word Count', 'Word Count Count', 'Description Length', 'Description Length Count', 'Description Duplicates', 'Description Duplicates Count', 'OPS', 'OPS Count', 'Links Status Code', 'File Size Aggregate', 'File Size Aggregate Count']]\r\n",
							"data_df.head()"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Change some column types"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data_df = data_df.astype({\"Market\": object, \"Region\": object})\r\n",
							"print(data_df.dtypes)\r\n",
							"print('-------------')\r\n",
							"print(country_df.dtypes)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Merge Dataframes "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dataRowsCount = len(data_df.index) # 2338\r\n",
							"countryRowsCount = len(country_df.index) # 152\r\n",
							"\r\n",
							"for i in range(dataRowsCount):\r\n",
							"  randomIndex = random.randint(0, 21) # Only 22 countries\r\n",
							"  data_df.at[i, 'Country Code'] = country_df.at[randomIndex, 'country_code']\r\n",
							"  data_df.at[i, 'Market'] = country_df.at[randomIndex, 'market_name']\r\n",
							"  data_df.at[i, 'Region'] = country_df.at[randomIndex, 'region_name']\r\n",
							"\r\n",
							"data_df.head()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Export to output file"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# mssparkutils.fs.put('/Ryte challenge/clean_data_sa.csv', data_df.to_csv(index=False), True)\r\n",
							"data_df.to_excel('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Ryte challenge/clean_data_from_notebook.xlsx')"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Channel Map - Data Generation')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Test dataset generation for Manpower channel calc column measure refactoring",
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "03ba073e-1096-43f2-b7da-eca34b959f08"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Imports\r\n",
							"import pandas as pd\r\n",
							"import random"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"excel_file = pd.ExcelFile('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/General Dataset Transformations/SourcesMediumExtract.xlsx')\r\n",
							"print(excel_file.sheet_names)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"source_df = pd.read_excel(excel_file, 0)\r\n",
							"medium_df = pd.read_excel(excel_file, 1)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"result = {\r\n",
							"    'source': [],\r\n",
							"    'medium': []\r\n",
							"}\r\n",
							"\r\n",
							"for i in range(2000):\r\n",
							"    random_source_index = random.randint(0, len(source_df.index) - 1)\r\n",
							"    val = source_df.at[random_source_index, 'Source']\r\n",
							"    result['source'].append(val)\r\n",
							"\r\n",
							"    random_medium_index = random.randint(0, len(medium_df.index) - 1)\r\n",
							"    val = medium_df.at[random_medium_index, 'Medium']\r\n",
							"    result['medium'].append(val)\r\n",
							"\r\n",
							"    "
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"result_df = pd.DataFrame.from_dict(result)\r\n",
							"result_df.head()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"result_df.to_excel('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/General Dataset Transformations/GeneratedFactTable.xlsx', sheet_name = 'FactTable', index = False)"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset Anonymization Tool')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "7d544680-0fd5-44d4-b6d8-d47f29a1987e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Default parameters\r\n",
							"input_file_path = '/Anonymization Tool Tests/sales-campaigns-formatted.xlsx'\r\n",
							"output_file_path = '/Anonymization Tool Tests/sales-campaigns-anonymized.xlsx'"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": []
						},
						"source": [
							"# Imports\r\n",
							"import pandas as pd\r\n",
							"import random"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read input excel file from data lake"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"try:\r\n",
							"    excel_file = pd.ExcelFile('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + input_file_path)\r\n",
							"    print(excel_file.sheet_names)\r\n",
							"\r\n",
							"except Exception as e:\r\n",
							"    raise Exception('Input excel file reading failed - ' + repr(e))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"try:\r\n",
							"    fact_df = pd.read_excel(excel_file, 0)\r\n",
							"    values_df = pd.read_excel(excel_file, 1)\r\n",
							"\r\n",
							"    dim_dfs = []\r\n",
							"    for dim_index in range(2, len(excel_file.sheet_names)):\r\n",
							"        dim_dfs.append(pd.read_excel(excel_file, dim_index))\r\n",
							"\r\n",
							"    fact_df.head()\r\n",
							"\r\n",
							"except Exception as e:\r\n",
							"    raise Exception('Input excel sheets reading failed - ' + repr(e))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Methods to detect errors in the input file structure"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Column names from values & dims have to match with a fact table column.\r\n",
							"fact_column_names = list(fact_df)\r\n",
							"def check_column_names(column_names):\r\n",
							"    for name in column_names:\r\n",
							"        if name not in fact_column_names: \r\n",
							"            raise Exception(f'Value/Dimensional column \\'{name}\\' does not match any from fact table.')\r\n",
							"\r\n",
							"# Dimensional sheets must contain valid data.\r\n",
							"def check_dim_columns_size(dim_df):\r\n",
							"    column_names = list(dim_df)\r\n",
							"    # Dimensional sheets must have at least 2 columns.\r\n",
							"    if len(column_names) < 2: \r\n",
							"        raise Exception(f'Dimensional sheets must contain at least two columns.')\r\n",
							"    first_size = dim_df[column_names[0]].count()\r\n",
							"    for name in column_names:\r\n",
							"        # All columns have to share size.\r\n",
							"        if dim_df[name].count() != first_size:\r\n",
							"            raise Exception(f'Column {name} has to share size with the other columns from the same dimensional sheet.')\r\n",
							"        # Empty columns are not allowed.\r\n",
							"        if dim_df[name].count() == 0:\r\n",
							"            raise Exception(f'Column {name} from dimensional sheet can not be empty.')\r\n",
							"    return first_size\r\n",
							"\r\n",
							"# Values from dimensional sheet columns can not be null or empty.\r\n",
							"def check_dim_values_null(values):\r\n",
							"    index = 0\r\n",
							"    for value in values:\r\n",
							"        if pd.isnull(value) or str(value).isspace():\r\n",
							"            raise Exception(f'Invalid null value in column: {column_name}, index: {index}')\r\n",
							"        index += 1"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Extract clean data from values & dimensional dataframes"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Values data (Sheet 2) processing\r\n",
							"try: \r\n",
							"    values_columns = list(values_df)\r\n",
							"    check_column_names(values_columns) \r\n",
							"    clean_values = []\r\n",
							"    for column_name in values_columns:\r\n",
							"        temp_value = {}\r\n",
							"        temp_value['name'] = column_name\r\n",
							"        temp_value['size'] = values_df[column_name].nunique()\r\n",
							"        values_with_null = list(values_df[column_name].unique())\r\n",
							"        temp_value['values'] = [x for x in values_with_null if not pd.isnull(x)]\r\n",
							"        clean_values.append(temp_value)\r\n",
							"\r\n",
							"    print(clean_values)\r\n",
							"\r\n",
							"except Exception as e:\r\n",
							"    raise Exception('Values sheet (2) processing failed - ' + repr(e))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Dimensional data (Sheet 3+) processing\r\n",
							"try:\r\n",
							"    clean_dims = []  # [dim1={size: n, cols: [{name: x, values: [x1, x2]}, {name: y, values: [y1, y2]}]}, dim2={...}]   \r\n",
							"    for dim_df in dim_dfs:\r\n",
							"        column_names = list(dim_df)\r\n",
							"        check_column_names(column_names)\r\n",
							"        dim_size = check_dim_columns_size(dim_df)\r\n",
							"\r\n",
							"        dim_columns = []\r\n",
							"        for column_name in column_names:\r\n",
							"            raw_values = list(dim_df[column_name])\r\n",
							"            check_dim_values_null(raw_values)\r\n",
							"            dim_columns.append({\r\n",
							"                'name': column_name,\r\n",
							"                'values': raw_values\r\n",
							"            })\r\n",
							"\r\n",
							"        clean_dims.append({\r\n",
							"            'size': dim_size,\r\n",
							"            'cols': dim_columns\r\n",
							"        })\r\n",
							"    \r\n",
							"    print(clean_dims)\r\n",
							"\r\n",
							"except Exception as e:\r\n",
							"    raise Exception('Dimensional sheet (3+) processing failed - ' + repr(e))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Incorporate clean data into the fact dataframe"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"try:\r\n",
							"    fact_rows = len(fact_df.index)\r\n",
							"    for i in range(fact_rows):\r\n",
							"        # Values data incorporation\r\n",
							"        for col in clean_values:\r\n",
							"            random_index = random.randint(0, col['size'] - 1)\r\n",
							"            fact_df.at[i, col['name']] = col['values'][random_index]\r\n",
							"\r\n",
							"        # Dimensional data incorporation\r\n",
							"        for dim in clean_dims:\r\n",
							"            random_index = random.randint(0, dim['size'] - 1) \r\n",
							"            for col in dim['cols']:\r\n",
							"                fact_df.at[i, col['name']] = col['values'][random_index]\r\n",
							"\r\n",
							"    fact_df.head()\r\n",
							"\r\n",
							"except Exception as e:\r\n",
							"    raise Exception('FactTable sheet (1) data incorporation failed - ' + repr(e))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Export result to output"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"try:\r\n",
							"    output_file_format = output_file_path.split('.')[-1]\r\n",
							"    if output_file_format == 'xlsx':\r\n",
							"        fact_df.to_excel('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + output_file_path, sheet_name = 'FactTable', index = False)\r\n",
							"    elif output_file_format == 'csv':\r\n",
							"        fact_df.to_csv('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + output_file_path, index = False)\r\n",
							"    else:\r\n",
							"        raise Exception(f'Invalid output format <{output_file_format}>')\r\n",
							"except Exception as e:\r\n",
							"    raise Exception('Output excel file writing failed - ' + repr(e))"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Get Shifts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9ac751d2-79ac-4183-ab82-b8232654cdc1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import requests\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def GetAccessToken():\r\n",
							"    url = 'https://login.microsoftonline.com/89248974-515e-4d65-9469-ab424abfd2d2/oauth2/token'\r\n",
							"    data = {\r\n",
							"        'grant_type': 'client_credentials',\r\n",
							"        'client_id': '7370627a-b1c3-4d83-baf1-5a7c35910337',\r\n",
							"        'client_secret': 'UjZ8Q~isPKVTRMSriUTJH~x7hLA.ok53AAx44df1',\r\n",
							"        'resource': 'https://graph.microsoft.com'\r\n",
							"    }\r\n",
							"\r\n",
							"    res = requests.post(url=url, data=data)\r\n",
							"    return res.json()\r\n",
							"\r\n",
							"GetAccessToken()\r\n",
							"    "
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# https://learn.microsoft.com/en-us/graph/api/resources/schedule?view=graph-rest-1.0\r\n",
							"\r\n",
							"token = GetAccessToken()['access_token']\r\n",
							"\r\n",
							"url = 'https://graph.microsoft.com/beta/teams/776c5cf3-1af9-4542-b845-ff6825d85492/schedule/shifts'\r\n",
							"headers = {\r\n",
							"    'Authorization': f'Bearer {token}',\r\n",
							"    'Content-Type': 'application/json',\r\n",
							"    'MS-APP-ACTS-AS': 'c9736d79-3914-4372-a68c-501f06dbfa11' ## User ID to Inspect\r\n",
							"}\r\n",
							"\r\n",
							"res = requests.get(url=url, headers=headers)\r\n",
							"data_shifts = res.json()['value']\r\n",
							"\r\n",
							"dataframe = pd.DataFrame(data_shifts)\r\n",
							"dataframe.head(5)\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadStreamersData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This script load all the data asociated with the existing streamers in our streamersCsv table.\nFor this reason it has to load streamersCsv data first\nEstimate run time = 25 min",
				"folder": {
					"name": "Training/Twitch Dashboard"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "19ea3f83-34ac-42d7-937d-93f2b2cf146a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"This script load all the data asociated with the **existing streamers** in our **streamersCSV** table.\r\n",
							"For this reason it has to load streamersCSV data first.\r\n",
							"Needs to be updated **infrequently**.\r\n",
							"\r\n",
							"Estimate run time = **25 - 50 min**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import requests\r\n",
							"import json\r\n",
							"import time\r\n",
							"import pandas as pd\r\n",
							"from requests.structures import CaseInsensitiveDict\r\n",
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"STREAMERS_FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/Streamers.csv\"\r\n",
							"FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/StreamersData.csv\"\r\n",
							"\r\n",
							"start_time = time.time()\r\n",
							"streamersCSV = spark.read.csv(STREAMERS_FILENAME, header=True, inferSchema=True)\r\n",
							"streamersCSV_df = streamersCSV.toPandas()\r\n",
							"#streamersCSV_df = streamersCSV.drop_duplicates(subset=\"user_name\")\r\n",
							"headers = CaseInsensitiveDict()\r\n",
							"secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'TwitchSecret')\r\n",
							"headers[\"Authorization\"] = \"Bearer \" + secret\r\n",
							"headers[\"Client-Id\"] = \"euj1dlm3po5d9e0xi03am76u5jhyz9\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load Streamers data. Iterate the **Streamers_id.csv** table wich stores all the streamers who have been found and returns a **CSV** with all his public data."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"streamersData = pd.DataFrame()\r\n",
							"for streamer in streamersCSV_df.index:\r\n",
							"    currentStreamer = str(streamersCSV_df['user_id'][streamer])\r\n",
							"    url = \"https://api.twitch.tv/helix/users?id=\" + currentStreamer\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    streamer_obj = json.loads(resp.text)\r\n",
							"    streamers_df = pd.DataFrame.from_records(streamer_obj[\"data\"])\r\n",
							"\r\n",
							"    url = \"https://api.twitch.tv/helix/channels/followers?broadcaster_id=\" + currentStreamer\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    followers_obj = json.loads(resp.text)\r\n",
							"    streamers_df[\"language\"] = streamersCSV_df[\"language\"][streamer]\r\n",
							"    streamers_df[\"followers\"] = followers_obj[\"total\"]\r\n",
							"\r\n",
							"    if 'description' in streamers_df.columns and not streamers_df['description'].isnull().all():\r\n",
							"        streamers_df[\"description\"] = streamers_df[\"description\"].str.replace('\"', \"'\")\r\n",
							"        \r\n",
							"    streamersData = pd.concat([streamersData,streamers_df], axis=0)\r\n",
							"    followers_obj = json.loads(resp.text)\r\n",
							"#streamersData.to_csv(FILENAME, index=False)\r\n",
							"mssparkutils.fs.put(FILENAME, streamersData.to_csv(index=False), True)\r\n",
							"\r\n",
							"print(\"--- %s seconds ---\" % (time.time() - start_time))"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadStreamsData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This script load all the data asociated with the current streams\nIt requieres to update frecuently, due to show existing currently data\nEstimate run time =  seconds",
				"folder": {
					"name": "Training/Twitch Dashboard"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1c9e3f63-b8ac-431d-8eb7-cf57fab35b60"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"This script load all the data asociated with the **current streams**.\r\n",
							"It requieres to **update frecuently**, due to show existing currently data.\r\n",
							"\r\n",
							"Estimate run time = **3 seconds**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import requests\r\n",
							"import json\r\n",
							"import time\r\n",
							"import pandas as pd\r\n",
							"from requests.structures import CaseInsensitiveDict\r\n",
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"STREAMERS_FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/Streamers.csv\"\r\n",
							"STREAMS_FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/Streams.csv\"\r\n",
							"\r\n",
							"start_time = time.time()\r\n",
							"#streamersCSV = mssparkutils.fs.head(STREAMERS_FILENAME)\r\n",
							"streamersCSV = spark.read.csv(STREAMERS_FILENAME, header=True, inferSchema=True)\r\n",
							"tuples = set([tuple(x) for x in streamersCSV.collect()])\r\n",
							"\r\n",
							"headers = CaseInsensitiveDict()\r\n",
							"secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'TwitchSecret')\r\n",
							"headers[\"Authorization\"] = \"Bearer \" + secret\r\n",
							"headers[\"Client-Id\"] = \"euj1dlm3po5d9e0xi03am76u5jhyz9\"\r\n",
							"\r\n",
							"languages = [\"en\", \"es\", \"fr\", \"pt\", \"de\", \"zh\", \"ja\", \"ar\", \"it\", \"ru\"]"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load Top Streams data. Returns a **json** with the current 100 streams wich have **more viewers**. This data **changes a lot** in a short period of time so outdated data may be displayed"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"aux_df = pd.DataFrame()\r\n",
							"for language in languages:\r\n",
							"    url = \"https://api.twitch.tv/helix/streams?first=100&language=\" + language\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    streams_obj = json.loads(resp.text)\r\n",
							"    streams_df = pd.DataFrame.from_records(streams_obj[\"data\"])\r\n",
							"    for stream in streams_df.index:\r\n",
							"        tuples.add(tuple([int(streams_df['user_id'][stream]),streams_df['user_name'][stream],streams_df['language'][stream]]))\r\n",
							"    streams_df[\"title\"] = streams_df[\"title\"].str.replace('\"', \"'\")\r\n",
							"    aux_df = pd.concat([aux_df,streams_df], axis=0)\r\n",
							"\r\n",
							"mssparkutils.fs.put(STREAMS_FILENAME, aux_df.to_csv(index=False), True)\r\n",
							"streamers_df = pd.DataFrame(set(tuples),columns=['user_id', 'user_name', 'language'])\r\n",
							"streamers_df = streamers_df.drop_duplicates(subset=\"user_id\", keep=\"first\")\r\n",
							"mssparkutils.fs.put(STREAMERS_FILENAME, streamers_df.to_csv(index=False), True)\r\n",
							"\r\n",
							"print(\"--- %s seconds ---\" % (time.time() - start_time))"
						],
						"outputs": [],
						"execution_count": 38
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadVideoData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "# This script load all the data asociated with the top games and its videos\n# Estimate run time = 40 seconds",
				"folder": {
					"name": "Training/Twitch Dashboard"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "3976374b-1d04-4408-a73f-ef21899f42f0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import requests\r\n",
							"import json\r\n",
							"import time\r\n",
							"import pandas as pd\r\n",
							"from requests.structures import CaseInsensitiveDict\r\n",
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"STREAMERS_FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/Streamers.csv\"\r\n",
							"TOP_GAMES_FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/TopGames.csv\"\r\n",
							"ALL_TOP_VIDEOS_FILENAME = \"abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/Training/Cristian/AllTopGames.csv\"\r\n",
							"\r\n",
							"start_time = time.time()\r\n",
							"streamersCSV = spark.read.csv(STREAMERS_FILENAME, header=True, inferSchema=True)\r\n",
							"tuples = set([tuple(x) for x in streamersCSV.collect()])\r\n",
							"\r\n",
							"headers = CaseInsensitiveDict()\r\n",
							"secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'TwitchSecret')\r\n",
							"headers[\"Authorization\"] = \"Bearer \" + secret\r\n",
							"headers[\"Client-Id\"] = \"euj1dlm3po5d9e0xi03am76u5jhyz9\"\r\n",
							"\r\n",
							"languages = [\"en\", \"es\", \"fr\", \"pt\", \"de\", \"zh\", \"ja\", \"ar\", \"it\", \"ru\"]"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load TopGames data. Returns a **json** with 100 **most viewed** categories of Twitch"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"https://api.twitch.tv/helix/games/top?first=100\"\r\n",
							"resp = requests.get(url, headers=headers)\r\n",
							"topGames = json.loads(resp.text)\r\n",
							"TopGames_df = pd.DataFrame.from_records(topGames[\"data\"])\r\n",
							"mssparkutils.fs.put(TOP_GAMES_FILENAME, TopGames_df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load Top Videos data. Returns a **json** with 100 **most viewed** videos of each top Category of Twitch"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"aux_df = pd.DataFrame()\r\n",
							"for game in TopGames_df.index:\r\n",
							"    currentGameID = TopGames_df['id'][game]\r\n",
							"    string = \"https://api.twitch.tv/helix/videos?first=100&game_id=\" + currentGameID + \"&sort=views\"\r\n",
							"    resp = requests.get(string, headers=headers)\r\n",
							"    topVideosObj = json.loads(resp.text)\r\n",
							"    TopVideos_df = pd.DataFrame.from_records(topVideosObj[\"data\"])\r\n",
							"    for video in TopVideos_df.index:\r\n",
							"        tuples.add(tuple([int(TopVideos_df['user_id'][video]),TopVideos_df['user_name'][video],TopVideos_df['language'][video]]))\r\n",
							"    TopVideos_df[\"title\"] = TopVideos_df[\"title\"].str.replace('\"', \"'\")\r\n",
							"    TopVideos_df[\"description\"] = TopVideos_df[\"description\"].str.replace('\"', \"'\")\r\n",
							"    TopVideos_df[\"game_id\"] = int(currentGameID)\r\n",
							"    aux_df = pd.concat([aux_df,TopVideos_df], axis=0)\r\n",
							"mssparkutils.fs.put(ALL_TOP_VIDEOS_FILENAME, aux_df.to_csv(index=False), True)\r\n",
							"streamers_df = pd.DataFrame(set(tuples),columns=['user_id', 'user_name', 'language'])\r\n",
							"streamers_df = streamers_df.drop_duplicates(subset=\"user_id\", keep=\"first\")\r\n",
							"mssparkutils.fs.put(STREAMERS_FILENAME, streamers_df.to_csv(index=False), True)\r\n",
							"\r\n",
							"print(\"--- %s seconds ---\" % (time.time() - start_time))"
						],
						"outputs": [],
						"execution_count": 25
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook GoogleAds')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e4df6878-4eab-4fdb-aa03-1300c952218e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import io\r\n",
							"import os\r\n",
							"import sys\r\n",
							"import glob\r\n",
							"import json\r\n",
							"import datetime\r\n",
							"import requests\r\n",
							"from tqdm import tqdm\r\n",
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"import google_auth_httplib2\r\n",
							"from rauth import OAuth2Service\r\n",
							"import google.oauth2.credentials\r\n",
							"from datetime import datetime, timedelta\r\n",
							"from googleapiclient.discovery import build as google_build\r\n",
							"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
							"from google.ads.googleads.client import GoogleAdsClient\r\n",
							"from google.ads.googleads.errors import GoogleAdsException"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"credentials = mssparkutils.credentials.getSecretWithLS('ls_Keyvault', 'GoogleAdsAlejandroTest')\r\n",
							"credentials = json.loads(credentials)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(credentials)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CLIENT_ID = credentials['CLIENT_ID']\r\n",
							"CLIENT_SECRET = credentials['CLIENT_SECRET']\r\n",
							"REFRESH_TOKEN = credentials['REFRESH_TOKEN']\r\n",
							"DEVELOPER_TOKEN = credentials['DEVELOPER_TOKEN']"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_access_token():\r\n",
							"    access_token = None\r\n",
							"    service = OAuth2Service(\r\n",
							"                                name=\"Get Access Token - GA OAuth2\",\r\n",
							"                                client_id= CLIENT_ID,\r\n",
							"                                client_secret=CLIENT_SECRET,\r\n",
							"                                access_token_url=\"https://oauth2.googleapis.com/token\",\r\n",
							"                                base_url=\"https://oauth2.googleapis.com/\",\r\n",
							"                            )\r\n",
							"    data = {'refresh_token': REFRESH_TOKEN,\r\n",
							"            'grant_type': 'refresh_token'}\r\n",
							"    session = service.get_auth_session(data=data, decoder=json.loads)\r\n",
							"    return session.access_token"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def getAccounts(ACCESS_TOKEN, manager_id, token):\r\n",
							"    manager_customer_id = manager_id\r\n",
							"    developer_token = token\r\n",
							"    account_sql = \"\"\"\r\n",
							"                    SELECT\r\n",
							"                      customer_client.client_customer,\r\n",
							"                      customer_client.level,\r\n",
							"                      customer_client.manager,\r\n",
							"                      customer_client.descriptive_name,\r\n",
							"                      customer_client.currency_code,\r\n",
							"                      customer_client.time_zone,\r\n",
							"                      customer_client.id\r\n",
							"                    FROM customer_client\r\n",
							"                    WHERE customer_client.level > 0\r\n",
							"                \"\"\"\r\n",
							"    response = requests.post(\"https://googleads.googleapis.com/v7/customers/\" + str(manager_customer_id) + \"/googleAds:searchStream\"\r\n",
							"                                            ,headers={\"Authorization\":\"Bearer \" + str(ACCESS_TOKEN),\r\n",
							"                                                      \"login-customer-id\":manager_customer_id,\r\n",
							"                                                      \"developer-token\":developer_token}\r\n",
							"                                            ,data={\"query\":account_sql}\r\n",
							"                                            ).json()\r\n",
							"    #List Comprehension used to pull all the accounts that are not manager accounts\r\n",
							"    Ad_acc = [x[\"customerClient\"][\"id\"] for x in response[0][\"results\"] if x[\"customerClient\"][\"manager\"] == False]\r\n",
							"    return Ad_acc"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ACCESS_TOKEN = get_access_token()\r\n",
							"token_expiry = datetime.now() - timedelta(days=1)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Ad_acc = getAccounts(ACCESS_TOKEN,\"9497681898\",\"74YhRrrXRugQwS-rtEar9w\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(json.dumps(Ad_acc, indent=4))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"start   = (datetime.now() + timedelta(days=-30)).date().strftime('%Y-%m-%d')\r\n",
							"\r\n",
							"end     = (datetime.now() + timedelta(days=-1)).date().strftime('%Y-%m-%d')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"credentialsAds = google.oauth2.credentials.Credentials(\r\n",
							"    ACCESS_TOKEN,\r\n",
							"    refresh_token=REFRESH_TOKEN,\r\n",
							"    token_uri='https://accounts.google.com/o/oauth2/token',\r\n",
							"    client_id=CLIENT_ID,\r\n",
							"    client_secret=CLIENT_SECRET\r\n",
							")\r\n",
							"authorized = google_auth_httplib2.AuthorizedHttp(credentials=credentialsAds)\r\n",
							"\r\n",
							"start_date = pd.to_datetime(start).date().isoformat().replace(\"-\",\"\")\r\n",
							"end_date = pd.to_datetime(end).date().isoformat().replace(\"-\",\"\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_all = pd.DataFrame()\r\n",
							"#print(\"Google Ads:\",\"Fetching account ids..\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"client = GoogleAdsClient.load_from_string(f\"\"\"# Developer token\r\n",
							"##########################################################################################\r\n",
							"# A developer token is required when making requests to the Google Ads API regardless of #\r\n",
							"# whether you're using the OAuth2 or Service Account configurations. To obtain a         #\r\n",
							"# developer token see:                                                                   #\r\n",
							"# https://developers.google.com/google-ads/api/docs/first-call/dev-token                 #\r\n",
							"##########################################################################################\r\n",
							"developer_token: {DEVELOPER_TOKEN}\r\n",
							"\r\n",
							"# Use proto plus\r\n",
							"##########################################################################################\r\n",
							"# This parameter specifies whether the client library should return proto-plus messages  #\r\n",
							"# or protobuf messages. This value should be explicitly set to either \"True\" or \"False\", #\r\n",
							"# For more information on the differences between these two types, see our Protobuf      #\r\n",
							"# Messages guide:                                                                        #\r\n",
							"# https://developers.google.com/google-ads/api/docs/client-libs/python/protobuf-messages #\r\n",
							"##########################################################################################\r\n",
							"use_proto_plus: True\r\n",
							"\r\n",
							"# OAuth2 configuration\r\n",
							"##########################################################################################\r\n",
							"# The below configuration parameters are used to authenticate using the recommended      #\r\n",
							"# OAuth2 flow. For more information on authenticating with OAuth2 see:                   #\r\n",
							"# https://developers.google.com/google-ads/api/docs/oauth/overview                       #\r\n",
							"##########################################################################################\r\n",
							"client_id: {CLIENT_ID}\r\n",
							"client_secret: {CLIENT_SECRET}\r\n",
							"refresh_token: {REFRESH_TOKEN}\r\n",
							"\r\n",
							"# Login customer ID configuration\r\n",
							"##########################################################################################\r\n",
							"# Required for manager accounts only: Specify the login customer ID used to authenticate #\r\n",
							"# API calls. This will be the customer ID of the authenticated manager account. It       #\r\n",
							"# should be set without dashes, for example: 1234567890 instead of 123-456-7890. You can #\r\n",
							"# also specify this later in code if your application uses multiple manager account +    #\r\n",
							"# OAuth pairs.                                                                           #\r\n",
							"##########################################################################################\r\n",
							"login_customer_id: 9497681898\r\n",
							"\"\"\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_campaigns(client, customer_id):\r\n",
							"    ga_service = client.get_service(\"GoogleAdsService\")\r\n",
							"    query = \"\"\"\r\n",
							"    SELECT\r\n",
							"        campaign.id,\r\n",
							"        campaign.name,\r\n",
							"        ad_group.id,\r\n",
							"        ad_group.name,\r\n",
							"        ad_group_criterion.criterion_id,\r\n",
							"        ad_group_criterion.keyword.text,\r\n",
							"        ad_group_criterion.keyword.match_type,\r\n",
							"        metrics.impressions,\r\n",
							"        metrics.clicks,\r\n",
							"        metrics.cost_micros\r\n",
							"    FROM keyword_view WHERE segments.date DURING LAST_7_DAYS\r\n",
							"    AND ad_group.status = 'ENABLED'\r\n",
							"    AND ad_group_criterion.status IN ('ENABLED', 'PAUSED')\r\n",
							"    ORDER BY metrics.impressions DESC\"\"\"\r\n",
							" \r\n",
							"    # Issues a search request using streaming.\r\n",
							"    search_request = client.get_type(\"SearchGoogleAdsStreamRequest\")\r\n",
							"    search_request.customer_id = customer_id\r\n",
							"    search_request.query = query\r\n",
							"    stream = ga_service.search_stream(search_request)\r\n",
							"    final = pd.DataFrame()\r\n",
							"    for batch in stream:\r\n",
							"        for row in batch.results:\r\n",
							"            campaign = row.campaign\r\n",
							"            ad_group = row.ad_group\r\n",
							"            criterion = row.ad_group_criterion\r\n",
							"            metrics = row.metrics\r\n",
							"            df = pd.DataFrame({\"Campaign\": campaign.name,\r\n",
							"                          \"CampaignID\": campaign.id,\r\n",
							"                          \"AdGroup\": ad_group.name,\r\n",
							"                          \"AdGroupID\": ad_group.id,\r\n",
							"                          \"Keyword\": criterion.keyword.text,\r\n",
							"                          \"MatchType\": criterion.keyword.match_type,\r\n",
							"                          \"Clicks\": metrics.clicks,\r\n",
							"                          \"Conversions\": metrics.conversions,\r\n",
							"                          \"Costs\": metrics.cost_micros ,\r\n",
							"                          \"Impressions\": metrics.impressions},index=[0])\r\n",
							" \r\n",
							"            final = pd.concat([final, df])\r\n",
							"            \"\"\"print(\r\n",
							"                f'Keyword text \"{criterion.keyword.text}\" with '\r\n",
							"                f'match type \"{criterion.keyword.match_type.name}\" '\r\n",
							"                f\"and ID {criterion.criterion_id} in \"\r\n",
							"                f'ad group \"{ad_group.name}\" '\r\n",
							"                f'with ID \"{ad_group.id}\" '\r\n",
							"                f'in campaign \"{campaign.name}\" '\r\n",
							"                f\"with ID {campaign.id} \"\r\n",
							"                f\"had {metrics.impressions} impression(s), \"\r\n",
							"                f\"{metrics.clicks} click(s), and \"\r\n",
							"                f\"{metrics.cost_micros} cost (in micros) during \"\r\n",
							"                \"the last 7 days.\"\r\n",
							"            )\"\"\"\r\n",
							"    return final"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = pd.DataFrame()\r\n",
							"\r\n",
							"for acc in Ad_acc:\r\n",
							"    df_tmp = get_campaigns(client, acc)\r\n",
							"    df = pd.concat([df, df_tmp])\r\n",
							"#df = df.drop_duplicates()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head(5)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import random\r\n",
							"def fillFakeData(df):\r\n",
							"    df['Impressions'] = [random.uniform(0.0, 1100.5) for k in df.index]\r\n",
							"    df['Clicks'] = [random.triangular(-100, 80, 1100) for k in df.index]\r\n",
							"    df['Clicks'] = df['Clicks']+df['Impressions']\r\n",
							"    df['Costs'] = [random.uniform(20, 5000) for k in df.index]\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df=fillFakeData(df)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head(20)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"df_campaigns = df['Campaign'].drop_duplicates()\r\n",
							"df_campaigns\r\n",
							""
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"cols = ['CountryID', 'BrandID']\r\n",
							"df[cols] = df.apply(lambda x: pd.Series(x['Campaign'].split('_')), axis=1)"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head(20)"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.put('/Training/Lisseth/GoogleAds.csv', df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 32
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_Javi_1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "74c2a7cb-2021-41d2-8afd-ed5306faeb09"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import io\r\n",
							"import os\r\n",
							"import sys\r\n",
							"import glob\r\n",
							"import json\r\n",
							"import datetime\r\n",
							"import requests\r\n",
							"from tqdm import tqdm\r\n",
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"import google_auth_httplib2\r\n",
							"from googleads import adwords\r\n",
							"from rauth import OAuth2Service\r\n",
							"import google.oauth2.credentials\r\n",
							"from datetime import datetime, timedelta\r\n",
							"from googleapiclient.discovery import build as google_build\r\n",
							"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
							"from google.ads.googleads.client import GoogleAdsClient\r\n",
							"from google.ads.googleads.errors import GoogleAdsException"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"credentials = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'GoogleAdsAlejandroTest')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Client and Tenant of the application in Azure Directory\r\n",
							"clientID = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
							"tenantID = '89248974-515e-4d65-9469-ab424abfd2d2'\r\n",
							"#getSecretwithLS -> this is with the LinkService y and the name of the secret in Key Vault\r\n",
							"clientSecret =  mssparkutils.credentials.getSecretWithLS('ls_keyvault','PBIServPrincipalAPISecret')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Petition to a web \r\n",
							"response = requests.get('https://google.com')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Petition to the API\r\n",
							"url = f'https://login.microsoftonline.com/{tenantID}/oauth2/token'\r\n",
							"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={clientID}&client_secret={clientSecret}'\r\n",
							"response = requests.post(url, data = body)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"responseJson = response.json()\r\n",
							"print(responseJson)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Access to a element of the dictionary with []\r\n",
							"token = responseJson['access_token']\r\n",
							"print(token)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Getting the ID of the workspace in PowerBI: Porfolio\r\n",
							"workSpaceID = 'ac1176e8-1b38-40d3-91e4-3b8f5983aa5f'\r\n",
							"url = f'https://api.powerbi.com/v1.0/myorg/groups/{workSpaceID}/datasets'"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Getting the DataSet of the worskpace\r\n",
							"r = requests.get(url, headers={\"Authorization\":\"Bearer \" + token})\r\n",
							"print(r)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Formatting the output of the response\r\n",
							"print(json.dumps( r.json(), indent=4, sort_keys=False))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"r_value = r.json()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"datasets = r.json()['value']\r\n",
							"keeper_keys = ['id', 'name', 'configuredBy']\r\n",
							"keeper = []\r\n",
							"for dataset in datasets:\r\n",
							"    keeper_dict = {}\r\n",
							"    for key in keeper_keys:\r\n",
							"        keeper_dict[key] = dataset[key]\r\n",
							"    keeper.append(keeper_dict)\r\n",
							"print(keeper)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = pd.DataFrame(keeper)\r\n",
							"df.columns"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df['name'] = df['name'].str.upper()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.put('Training/Javier/Dataset.csv',df.to_csv(index=False),True)"
						],
						"outputs": [],
						"execution_count": 24
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_Lisseth')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "fdf5973a-7867-4a36-be48-e3a401da9ed4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import io\r\n",
							"import os\r\n",
							"import sys\r\n",
							"import glob\r\n",
							"import json\r\n",
							"import datetime\r\n",
							"import requests\r\n",
							"from tqdm import tqdm\r\n",
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"import google_auth_httplib2\r\n",
							"from googleads import adwords\r\n",
							"from rauth import OAuth2Service\r\n",
							"import google.oauth2.credentials\r\n",
							"from datetime import datetime, timedelta\r\n",
							"from googleapiclient.discovery import build as google_build\r\n",
							"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
							"from google.ads.googleads.client import GoogleAdsClient\r\n",
							"from google.ads.googleads.errors import GoogleAdsException"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"credentials = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'GoogleAdsAlejandroTest')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Client and Tenant of the application in Azure Directory\r\n",
							"clientID = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
							"tenantID = '89248974-515e-4d65-9469-ab424abfd2d2'\r\n",
							"#getSecretwithLS -> this is with the LinkService y and the name of the secret in Key Vault\r\n",
							"clientSecret =  mssparkutils.credentials.getSecretWithLS('ls_keyvault','PBIServPrincipalAPISecret')"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Petition to a web \r\n",
							"response = requests.get('https://google.com')"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Petition to the API\r\n",
							"url = f'https://login.microsoftonline.com/{tenantID}/oauth2/token'\r\n",
							"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={clientID}&client_secret={clientSecret}'\r\n",
							"response = requests.post(url, data = body)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"responseJson = response.json()\r\n",
							"print(responseJson)"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Access to a element of the dictionary with []\r\n",
							"token = responseJson['access_token']\r\n",
							"print(token)"
						],
						"outputs": [],
						"execution_count": 69
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Getting the ID of the workspace in PowerBI: Porfolio\r\n",
							"workSpaceID = 'ac1176e8-1b38-40d3-91e4-3b8f5983aa5f'\r\n",
							"url = f'https://api.powerbi.com/v1.0/myorg/groups/{workSpaceID}/datasets'"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Getting the DataSet of the worskpace\r\n",
							"r = requests.get(url, headers={\"Authorization\":\"Bearer \" + token})\r\n",
							"print(r)"
						],
						"outputs": [],
						"execution_count": 75
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Formatting the output of the response\r\n",
							"print(json.dumps( r.json(), indent=4, sort_keys=False))"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"datasets = r.json()['value']\r\n",
							"keeper_keys = ['id', 'name', 'configuredBy']\r\n",
							"keeper = []\r\n",
							"\r\n",
							"for dataset in datasets:\r\n",
							"    keeper_dict = {}\r\n",
							"\r\n",
							"    for key in keeper_keys:\r\n",
							"        keeper_dict[key] = dataset[key]\r\n",
							"        \r\n",
							"    keeper.append(keeper_dict)\r\n",
							"\r\n",
							"print(keeper)"
						],
						"outputs": [],
						"execution_count": 81
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = pd.DataFrame(keeper)\r\n",
							"df.columns"
						],
						"outputs": [],
						"execution_count": 82
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.head()"
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df['name'] = df['name'].str.upper()"
						],
						"outputs": [],
						"execution_count": 84
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"csv  = df.to_csv(index=False)"
						],
						"outputs": [],
						"execution_count": 92
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.put('/Training/Lisseth/datasets.csv',csv,True)"
						],
						"outputs": [],
						"execution_count": 94
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_Mario')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "77325f35-429a-461d-ac01-1535d94a69e8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import pandas as pd\r\n",
							"import json\r\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"mssparkutils.fs.ls(\"/\")\r\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"head = mssparkutils.fs.head(\"/Training/Mario/TopGames.json\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"object_jsn = json.loads(head)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"objectdata =object_jsn['data']"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"mssparkutils.fs.put(\"/Training/Mario/TopGames2.json\", str(objectdata), True)"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = pd.DataFrame(objectdata)\r\n",
							"\r\n",
							"df.head()"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df[(df['id']) > \"20000\"]"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.put(\"/Training/Mario/TopGames2.csv\", df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 40
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook__Javi')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Training"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "daa22123-6122-483c-b471-3f4080850bc1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import io\r\n",
							"import os\r\n",
							"import sys\r\n",
							"import glob\r\n",
							"import json\r\n",
							"import datetime\r\n",
							"import requests\r\n",
							"from tqdm import tqdm\r\n",
							"import numpy as np\r\n",
							"import pandas as pd\r\n",
							"import google_auth_httplib2\r\n",
							"from googleads import adwords\r\n",
							"from rauth import OAuth2Service\r\n",
							"import google.oauth2.credentials\r\n",
							"from datetime import datetime, timedelta\r\n",
							"from googleapiclient.discovery import build as google_build\r\n",
							"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
							"from google.ads.googleads.client import GoogleAdsClient\r\n",
							"from google.ads.googleads.errors import GoogleAdsException"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.credentials.getSecretWithLS('KeyVaultDataX', 'GoogleAdsAlejandroTest')"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PBIMetadata')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "01110fb0-087f-411b-90b0-49ff7865a948"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Imports"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"import requests \r\n",
							"from requests.structures import CaseInsensitiveDict\r\n",
							"import json\r\n",
							"import pandas as pd\r\n",
							"import numpy as np\r\n",
							"import uuid\r\n",
							"from datetime import datetime, timezone, timedelta"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def safe_print(response):\r\n",
							"    print(response)\r\n",
							"    try:\r\n",
							"        print(json.dumps(response.json(), indent=4, sort_keys=False))\r\n",
							"    except:\r\n",
							"        pass\r\n",
							"\r\n",
							"def getID(unformatedGUID):\r\n",
							"    strList = unformatedGUID.split(\"$\")\r\n",
							"    result = \"\"\r\n",
							"    if len(strList) > 1 :\r\n",
							"        result = strList[-2]\r\n",
							"    return result"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Credentials"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"client_id = '0ab236de-0088-4311-bd50-11fa6b38c323'\r\n",
							"tenant_id = '89248974-515e-4d65-9469-ab424abfd2d2'\r\n",
							"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIMetadataClientSecret')\r\n",
							"account_password = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIMetadataClientUserAndPassword')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"body = f'client_id={client_id}&grant_type=password&resource=https%3A%2F%2Fanalysis.windows.net%2Fpowerbi%2Fapi&{account_password}'\r\n",
							"r = requests.post(f'https://login.microsoftonline.com/{tenant_id}/oauth2/token', data=body)\r\n",
							"access_token = r.json()['access_token']\r\n",
							"\r\n",
							"headers = CaseInsensitiveDict()\r\n",
							"headers[\"Authorization\"] = \"Bearer \" + access_token"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Workspaces(Groups)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"https://api.powerbi.com/v1.0/myorg/groups\"\r\n",
							"\r\n",
							"resp = requests.get(url, headers=headers)\r\n",
							"#safe_print(resp)\r\n",
							"obj = resp.json()\r\n",
							"\r\n",
							"groups_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"groups_df[\"id_duplicate\"] = groups_df[\"id\"]\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/Groups.csv\", groups_df.to_csv(index=False), True)\r\n",
							"#print(groups_df.head())"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Resources (Datasets, Dataflows and Reports)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data_df = pd.DataFrame()\r\n",
							"types = [\"datasets\", \"dataflows\", \"reports\"]\r\n",
							"for group in groups_df[\"id\"]:\r\n",
							"    group = str(group)\r\n",
							"    for _type in types:\r\n",
							"        url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
							"        url += group + \"/\" + _type\r\n",
							"        resp = requests.get(url, headers=headers)\r\n",
							"        obj = resp.json()\r\n",
							"        new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"        new_df[\"group_id\"] = group\r\n",
							"        new_df[\"type\"] = _type[:-1]\r\n",
							"        if _type == \"dataflows\":\r\n",
							"            if 'objectId' in new_df.columns:\r\n",
							"                new_df[\"id\"] = new_df[\"objectId\"]\r\n",
							"        data_df = pd.concat([data_df,new_df],ignore_index=True)\r\n",
							"\r\n",
							"#print(data_df.shape)\r\n",
							"data_df[\"id_duplicate\"] = data_df[\"id\"]\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/Resources.csv\", data_df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Report pages"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"report_df = data_df[data_df[\"type\"] == \"report\"]\r\n",
							"pages_df = pd.DataFrame()\r\n",
							"for id_ in report_df[\"id\"]:\r\n",
							"    group = report_df[report_df[\"id\"] == id_][\"group_id\"].iloc[0]\r\n",
							"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
							"    url += group + \"/reports/\" + id_ + \"/pages\"\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    obj = resp.json()\r\n",
							"    new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"    new_df[\"report_id\"] = id_\r\n",
							"    new_df[\"group_id\"] = group\r\n",
							"    new_df[\"Id\"] = new_df.report_id.map(str) + new_df.name\r\n",
							"    new_df[\"id_duplicate\"] = new_df[\"report_id\"].apply(lambda x: uuid.uuid4())\r\n",
							"    pages_df = pd.concat([pages_df,new_df],ignore_index=True)\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/ReportPages.csv\", pages_df.to_csv(index=False), True)\r\n",
							"#print(pages_df.shape)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Datasources\r\n",
							"\r\n",
							"API only allows getDatasource calls on datasets, dataflows and RDL(paginated reports). Standard reports don't support getDatasource calls."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"datasources_df = pd.DataFrame()\r\n",
							"for id_ in data_df[\"id\"]:\r\n",
							"    group = data_df[data_df[\"id\"] == id_][\"group_id\"].iloc[0]\r\n",
							"    resource = data_df[data_df[\"id\"] == id_][\"type\"].iloc[0] + \"s\"\r\n",
							"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
							"    url += group + \"/\" + resource + \"/\" + id_ + \"/\" + \"datasources\"\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    obj = resp.json()\r\n",
							"    new_df = pd.DataFrame()\r\n",
							"    if \"value\" in obj.keys():\r\n",
							"        if len(obj[\"value\"]) > 0:\r\n",
							"            new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"            new_df[\"resource_id\"] = id_\r\n",
							"            new_df[\"group_id\"] = group\r\n",
							"            new_df[\"resource_type\"] = resource[:-1]\r\n",
							"            new_df[\"id\"] = new_df[\"datasourceId\"]\r\n",
							"            new_df[\"id_duplicate\"] = new_df[\"id\"].apply(lambda x: uuid.uuid4())\r\n",
							"            new_df = pd.concat([new_df.drop(['connectionDetails'], axis=1), new_df['connectionDetails'].apply(pd.Series)], axis=1)\r\n",
							"    datasources_df = pd.concat([datasources_df,new_df],ignore_index=True)\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/Datasources.csv\", datasources_df.to_csv(index=False), True)\r\n",
							"#print(datasources_df.shape)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Refresh History(dataflows and datasets)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"refresh_df = pd.DataFrame()\r\n",
							"datasets_dataflows = data_df[(data_df['type'] == 'dataset') | (data_df['type'] == 'dataflow')]\r\n",
							"for id_ in datasets_dataflows[\"id\"]:\r\n",
							"    group = datasets_dataflows[datasets_dataflows[\"id\"] == id_][\"group_id\"].iloc[0]\r\n",
							"    type_ = datasets_dataflows[datasets_dataflows[\"id\"] == id_][\"type\"].iloc[0] + \"s\"\r\n",
							"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
							"    url += group + \"/\" + type_ + \"/\" + id_ + \"/\"\r\n",
							"    if type_ == \"datasets\":\r\n",
							"        url += \"refreshes\"\r\n",
							"    else:\r\n",
							"        url += \"transactions\"\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    obj = resp.json()\r\n",
							"    if \"value\" in obj.keys(): # Direct query or live-connection based datasets will return error.\r\n",
							"        new_df = pd.DataFrame()\r\n",
							"        new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"        new_df[\"resource_id\"] = id_\r\n",
							"        new_df[\"group_id\"] = group\r\n",
							"        new_df[\"resource_type\"] = type_[:-1]\r\n",
							"        refresh_df = pd.concat([refresh_df,new_df],ignore_index=True)\r\n",
							"refresh_df = refresh_df.astype({\"id\": str})\r\n",
							"refresh_df[\"id_duplicate\"] = np.where(pd.isnull(refresh_df[\"requestId\"]), refresh_df[\"id\"].apply(getID), refresh_df[\"requestId\"])\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/RefreshHistory.csv\", refresh_df.to_csv(index=False), True)\r\n",
							"#print(refresh_df.shape)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Imports\r\n",
							"\r\n",
							"Adding import name to data dataframe for resources created when importing .pbix files"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"imports_df = pd.DataFrame()\r\n",
							"for group in groups_df[\"id\"]:\r\n",
							"    group = str(group)\r\n",
							"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
							"    url += group + \"/\" + \"imports\"\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    obj = resp.json()\r\n",
							"    if \"value\" in obj.keys():\r\n",
							"        new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"        new_df[\"group_id\"] = group\r\n",
							"        imports_df = pd.concat([imports_df,new_df],ignore_index=True)\r\n",
							"\r\n",
							"data_df[\"import_name\"] = \"\"\r\n",
							"\r\n",
							"#mssparkutils.fs.put(\"/PBIMetadata/Imports.csv\", imports_df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"for id_ in imports_df[\"id\"]:\r\n",
							"    name = imports_df[imports_df[\"id\"] == id_][\"name\"].iloc[0]\r\n",
							"    datasets = imports_df[imports_df[\"id\"] == id_][\"datasets\"].iloc[0]\r\n",
							"    reports = imports_df[imports_df[\"id\"] == id_][\"reports\"].iloc[0]\r\n",
							"    dataflows = imports_df[imports_df[\"id\"] == id_][\"dataflows\"].iloc[0]\r\n",
							"    for dataset in datasets:\r\n",
							"        data_df.loc[data_df[\"id\"] == dataset[\"id\"], \"import_name\"] = name\r\n",
							"        data_df.loc[data_df[\"id\"] == dataset[\"id\"], \"isFromPbix\"] = \"TRUE\"\r\n",
							"    for report in reports:\r\n",
							"        data_df.loc[data_df[\"id\"] == report[\"id\"], \"import_name\"] = name\r\n",
							"        data_df.loc[data_df[\"id\"] == report[\"id\"], \"isFromPbix\"] = \"TRUE\"\r\n",
							"    for dataflow in dataflows:\r\n",
							"        data_df.loc[data_df[\"id\"] == dataflow[\"id\"], \"import_name\"] = name\r\n",
							"        data_df.loc[data_df[\"id\"] == dataflow[\"id\"], \"isFromPbix\"] = \"TRUE\"\r\n",
							"#print(data_df[data_df[\"import_name\"] != \"\"])\r\n",
							"data_df.loc[data_df[\"isFromPbix\"] != \"TRUE\", \"isFromPbix\"] = \"FALSE\"\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/Resources.csv\", data_df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Users \r\n",
							"The number of times a user is in the table is the same as the number of workspaces the user belongs to"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"users_df = pd.DataFrame()\r\n",
							"for group in groups_df[\"id\"]:\r\n",
							"    group = str(group)\r\n",
							"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
							"    url += group + \"/users\"\r\n",
							"    resp = requests.get(url, headers=headers)\r\n",
							"    obj = resp.json()\r\n",
							"    new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
							"    new_df[\"group_id\"] = group\r\n",
							"    new_df[\"id_duplicate\"] = new_df[\"identifier\"].apply(lambda x: uuid.uuid4())\r\n",
							"    users_df = pd.concat([users_df,new_df],ignore_index=True)\r\n",
							"\r\n",
							"#print(users_df.shape)\r\n",
							"#print(users_df)\r\n",
							"mssparkutils.fs.put(\"/PBIMetadata/Users.csv\", users_df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Service principal credentials"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIServPrincipalAPISecret')\r\n",
							"client_id = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
							"tenant_id = '89248974-515e-4d65-9469-ab424abfd2d2'"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={client_id}&client_secret={client_secret}'\r\n",
							"r = requests.post(f'https://login.microsoftonline.com/{tenant_id}/oauth2/token', data=body)\r\n",
							"access_token = r.json()['access_token']\r\n",
							"\r\n",
							"headers = CaseInsensitiveDict()\r\n",
							"headers[\"Authorization\"] = \"Bearer \" + access_token"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Activity events\r\n",
							"The activity events registered in the past 30 days are registered and stored in ActivityEvents.csv. Said file already contains previously retrieved information. To avoid duplicates information must be updated not before 30 days."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# resourcesId = [\"DataflowId\", \"DatasourceId\", \"DatasetId\", \"ReportId\", \"DashboardId\"]\r\n",
							"# dates = []\r\n",
							"# dates.append(datetime.now())\r\n",
							"\r\n",
							"# activity_eventsCSV = spark.read.csv('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net/PBIMetadata/ActivityEvents.csv', header=True, inferSchema=True)\r\n",
							"# activity_events_df = activity_eventsCSV.toPandas()\r\n",
							"# #activity_events_df = pd.DataFrame()\r\n",
							"\r\n",
							"# for i in range(1,29):\r\n",
							"#     dates.append(datetime.now() - timedelta(i))\r\n",
							"# for date in dates:\r\n",
							"#     # print(date.strftime(f\"%Y-%m-%dT00:00:00Z\"))\r\n",
							"#     # print(date.strftime(f\"%Y-%m-%dT23:59:59Z\"))\r\n",
							"#     startTime = date.strftime(f\"%Y-%m-%dT00:00:00Z\")\r\n",
							"#     endTime = date.strftime(f\"%Y-%m-%dT23:59:59Z\")\r\n",
							"\r\n",
							"#     url = f\"https://api.powerbi.com/v1.0/myorg/admin/activityevents?startDateTime='{startTime}'&endDateTime='{endTime}'\"\r\n",
							"\r\n",
							"#     resp = requests.get(url, headers=headers)\r\n",
							"#     #safe_print(resp)\r\n",
							"#     obj = resp.json()\r\n",
							"\r\n",
							"#     new_df = pd.DataFrame.from_records(obj[\"activityEventEntities\"])\r\n",
							"#     for resource in resourcesId:\r\n",
							"#             if resource in new_df.columns:\r\n",
							"#                 new_df[\"ResourceId\"] = new_df[resource]\r\n",
							"\r\n",
							"#     activity_events_df = pd.concat([activity_events_df,new_df],ignore_index=True)\r\n",
							"\r\n",
							"#     while(not obj[\"lastResultSet\"]):\r\n",
							"#         url = obj[\"continuationUri\"]\r\n",
							"#         resp = requests.get(url, headers=headers)\r\n",
							"#         obj = resp.json()\r\n",
							"\r\n",
							"#         new_df = pd.DataFrame.from_records(obj[\"activityEventEntities\"])\r\n",
							"#         for resource in resourcesId:\r\n",
							"#             if resource in new_df.columns:\r\n",
							"#                 new_df[\"ResourceId\"] = new_df[resource]\r\n",
							"#         new_df[\"id_duplicate\"] = new_df[\"Id\"]\r\n",
							"#         activity_events_df = pd.concat([activity_events_df,new_df],ignore_index=True)\r\n",
							"# #print(activity_events_df.shape)\r\n",
							"# mssparkutils.fs.put(\"/PBIMetadata/ActivityEvents.csv\", activity_events_df.to_csv(index=False), True)"
						],
						"outputs": [],
						"execution_count": 41
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PortfolioDashboardsAPI')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "486e2baf-a909-46d7-b261-1b33e340afbe"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"import requests\r\n",
							"import json\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Request access token"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIServPrincipalAPISecret')\r\n",
							"client_id = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
							"tenant_id = '89248974-515e-4d65-9469-ab424abfd2d2'\r\n",
							"workspace_id = 'ac1176e8-1b38-40d3-91e4-3b8f5983aa5f'"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={client_id}&client_secret={client_secret}'\r\n",
							"r = requests.post(f'https://login.microsoftonline.com/{tenant_id}/oauth2/token', data=body)"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"access_token = r.json()['access_token']"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Request reports and pages information"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Helper for input date processing.\r\n",
							"def process_date(datetime):\r\n",
							"    date = datetime.split('T')[0]\r\n",
							"    date_items = date.split('-')\r\n",
							"    return date_items[1] + '/' + date_items[2] + '/' + date_items[0]"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"clean_reports = []\r\n",
							"clean_pages = []\r\n",
							"\r\n",
							"url=f'https://api.powerbi.com/v1.0/myorg/admin/groups/{workspace_id}/reports'\r\n",
							"res = requests.get(url, headers={\"Authorization\":\"Bearer \" + access_token})\r\n",
							"reports = res.json()['value']\r\n",
							"        \r\n",
							"for report in reports:\r\n",
							"    # Info from each report\r\n",
							"    clean_reports.append({\r\n",
							"        'ReportId': report['id'],\r\n",
							"        'ReportName': report['name'],\r\n",
							"        'ReportUrl': report['webUrl'],\r\n",
							"        'ReportCreationDate': process_date(report['createdDateTime']),\r\n",
							"        'ReportLastModificationDate': process_date(report['modifiedDateTime']),\r\n",
							"        'ReportCreator': report['createdBy'],\r\n",
							"        'ReportLastModifier': report['modifiedBy']\r\n",
							"    })\r\n",
							"    # Pages from each report\r\n",
							"    try:\r\n",
							"        reportId = report['id']\r\n",
							"        url=f'https://api.powerbi.com/v1.0/myorg/groups/{workspace_id}/reports/{reportId}/pages'\r\n",
							"        res = requests.get(url, headers={\"Authorization\":\"Bearer \" + access_token})\r\n",
							"        pages = res.json()['value']\r\n",
							"\r\n",
							"    except Exception as e:\r\n",
							"        clean_reports.pop(-1)\r\n",
							"        continue\r\n",
							"\r\n",
							"    for page in pages:\r\n",
							"        clean_pages.append({\r\n",
							"            'ReportSectionId': page['Name'],\r\n",
							"            'ReportSectionName': page['displayName'],\r\n",
							"            'ReportSectionOrder': page['order'],\r\n",
							"            'ReportId': reportId\r\n",
							"        })\r\n",
							"\r\n",
							"reports_df = pd.DataFrame(clean_reports)\r\n",
							"pages_df = pd.DataFrame(clean_pages)"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(json.dumps(reports, indent=4, sort_keys=False))"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(json.dumps(pages, indent=4, sort_keys=False))"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Store the results as csv files in the Data Warehouse"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"reports_output_file_path = '/0000 Portfolio API/Reports.csv'\r\n",
							"sections_output_file_path = '/0000 Portfolio API/ReportSections.csv'"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"reports_df.to_csv('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + reports_output_file_path, index = False)\r\n",
							"pages_df.to_csv('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + sections_output_file_path, index = False)"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"proposal_output_file_path = '/0000 Portfolio API/Proposal.xlsx'\r\n",
							"with pd.ExcelWriter('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + proposal_output_file_path) as writer:\r\n",
							"    reports_df.to_excel(writer, sheet_name=\"Reports\", index=False)\r\n",
							"    pages_df.to_excel(writer, sheet_name=\"ReportSections\", index=False)"
						],
						"outputs": [],
						"execution_count": 55
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Practica2Almacenamiento')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "67b3f963-b2f1-42a0-992d-4c59873e6bf7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import col, asc,desc\r\n",
							"from pyspark.sql.types import *"
						],
						"outputs": [],
						"execution_count": 96
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"En primer lugar cargamos el CSV a un dataframe. Dado que hay muchas columnas con diferentes tipos, podemos usar la opcion _inferSchema_ para que los tipos se deduzcan. En estos casos siempre es conveniente revisar que los tipos inferidos sean los correctos con el método _printSchema_."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"path= 'spotify_2022.csv'\r\n",
							"print(path)\r\n",
							"#df = spark.read.load(path, format='csv', inferSchema=True, header=True)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Como se puede observar, al estar el dataset bien formado los tipos inferidos son los correctos (incluso para el campo _explicit_, en el que detecta el tipo _boolean_)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 104
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para obtener el número de registros podemos simplemente usar la función count"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 105
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para estas primeras consultas más sencillas se usarán métodos en vez de directamente código SQL para probar ambas opciones. Nótese que la mayoría de métodos tienen dos nombres, el propio de spark y un apodo para asimilarse a la sintaxis SQL. En este caso se usará la sintaxis similar a SQL.\r\n",
							"\r\n",
							"Para este primer ejemplo simplemente se ha realizado un select para quedarnos sólo con la columna interesada y un distinct, que elimina duplicados atendiendo a todas las columnas (que tras el select, es sólo _track_genre_). Al igual que ene el resto de futuras celdas, se usa show para forzar el cálculo y mostrar el resultado, pasando un número alto  como máximo para que se vean los resultados completos."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.select('track_genre').distinct().show(1000)"
						],
						"outputs": [],
						"execution_count": 99
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para el siguiente código se usa una query filtrando por el artista Queen con where y ordenando de forma descendente por popularidad. Como se puede ver, es muy similar a escribir directamente SQL.\r\n",
							"\r\n",
							"En este caso además se pueden ver las tres formas de referirse a una columna. Si no se requiere hacer nada salvo pasarlo como argumento, se puede usar directamente el nombre. Si no, es necesario o bien acceder desde el dataframe (_df.artist_) o bien con la función col pasándole el nombre (_col('popularity')_)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.select('artist', 'track_name', 'popularity'\r\n",
							"    ).where(df.artist == 'Queen'\r\n",
							"    ).orderBy(col('popularity').desc(), \r\n",
							"    ).show(truncate=False)"
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Dado que los siguientes ejemplos son algo más complejos, se ha optado por usar directamente SQL. Para ello es necesario en primer lugar crear una vista temporar, en este caso llamada _spotify_."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createOrReplaceTempView('spotify')"
						],
						"outputs": [],
						"execution_count": 101
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para esta consulta es necesario en primer lugar filtrar para quedarnos sólo con el género 'edm'. Al agrupar por artista se puede obtener la popularidad media por artista para establecer el orden descendente. Por último con _LIMIT_ podemos restringir el número de registros, aunque si sólo quisiéramos limitar a 5 a la hora de mostrar se le podría pasar el 5 a la función _show_."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"SELECT artist, AVG(popularity) popularity\r\n",
							"FROM spotify\r\n",
							"WHERE track_genre='edm'\r\n",
							"GROUP BY artist\r\n",
							"ORDER BY AVG(popularity) DESC\r\n",
							"LIMIT 5\"\"\").show()"
						],
						"outputs": [],
						"execution_count": 109
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"En este caso, para hacerlo en SQL es necesario hacer una consulta algo compleja. En primer lugar, hay que hacer una agrupación para obtener la popularidad media por artista y género. Tras esto, la forma más consistente para obtener el primer elemento de cada grupo (tras agrupar por género) es usar el método ROW_NUMBER() ordenado por popularidad (que es la popularidad media de la anterior query) y agrupada por género.\r\n",
							"\r\n",
							"Por último, basta con quedarse con las filas con _ROW_NUMBER==1_ (es decir, las primeras de cada género). Para este paso final se han usado de nuevo métodos en vez de código por comodidad (esto se puede hacer ya que el método SQL devuelve un dataframe con el resultado, por lo que se puede encadenar)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"\r\n",
							"    SELECT *,\r\n",
							"        ROW_NUMBER() OVER(PARTITION BY track_genre\r\n",
							"                        ORDER BY popularity DESC) AS rank\r\n",
							"    FROM (\r\n",
							"        SELECT artist,\r\n",
							"            track_genre,\r\n",
							"            AVG(popularity) popularity\r\n",
							"        FROM spotify\r\n",
							"        GROUP BY artist, track_genre\r\n",
							"        ORDER BY AVG(popularity) DESC\r\n",
							"    )\r\n",
							"\"\"\").select('artist', 'track_genre').where(col('rank') ==1).show(10000)"
						],
						"outputs": [],
						"execution_count": 115
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Split Excel sheets as CSV files')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0dd834e5-2396-4a70-9fd1-390f05aadd07"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"input_file_path = '/<parent_folder>/<file_name>.xlsx'\r\n",
							"output_directory_path = '/<parent_folder>/<output_folder>/'"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"excel_file = pd.ExcelFile('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + input_file_path)\r\n",
							"sheet_names = excel_file.sheet_names\r\n",
							"    \r\n",
							"for index in range(0, len(sheet_names)):\r\n",
							"    df = pd.read_excel(excel_file, index)\r\n",
							"    output_file_name = sheet_names[index] + '.csv'\r\n",
							"    df.to_csv('abfss://dataxsynapsefs@adlsdatax01.dfs.core.windows.net' + output_directory_path + output_file_name, index = False)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestSpot')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "144861ac-5b1e-49ac-ae60-1920dcf53bc8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import col, asc,desc\r\n",
							"from pyspark.sql.types import *"
						],
						"outputs": [],
						"execution_count": 96
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"En primer lugar cargamos el CSV a un dataframe. Dado que hay muchas columnas con diferentes tipos, podemos usar la opcion _inferSchema_ para que los tipos se deduzcan. En estos casos siempre es conveniente revisar que los tipos inferidos sean los correctos con el método _printSchema_."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"container= 'dataxsynapsefs'\r\n",
							"datalake= 'adlsdatax01'\r\n",
							"directory= 'spotify_2022.csv'\r\n",
							"path = f'abfss://{container}@{datalake}.dfs.core.windows.net/{directory}'\r\n",
							"print(path)\r\n",
							"df = spark.read.load(path, format='csv', inferSchema=True, header=True)"
						],
						"outputs": [],
						"execution_count": 97
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Como se puede observar, al estar el dataset bien formado los tipos inferidos son los correctos (incluso para el campo _explicit_, en el que detecta el tipo _boolean_)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 104
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para obtener el número de registros podemos simplemente usar la función count"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 105
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para estas primeras consultas más sencillas se usarán métodos en vez de directamente código SQL para probar ambas opciones. Nótese que la mayoría de métodos tienen dos nombres, el propio de spark y un apodo para asimilarse a la sintaxis SQL. En este caso se usará la sintaxis similar a SQL.\r\n",
							"\r\n",
							"Para este primer ejemplo simplemente se ha realizado un select para quedarnos sólo con la columna interesada y un distinct, que elimina duplicados atendiendo a todas las columnas (que tras el select, es sólo _track_genre_). Al igual que ene el resto de futuras celdas, se usa show para forzar el cálculo y mostrar el resultado, pasando un número alto  como máximo para que se vean los resultados completos."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.select('track_genre').distinct().show(1000)"
						],
						"outputs": [],
						"execution_count": 99
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para el siguiente código se usa una query filtrando por el artista Queen con where y ordenando de forma descendente por popularidad. Como se puede ver, es muy similar a escribir directamente SQL.\r\n",
							"\r\n",
							"En este caso además se pueden ver las tres formas de referirse a una columna. Si no se requiere hacer nada salvo pasarlo como argumento, se puede usar directamente el nombre. Si no, es necesario o bien acceder desde el dataframe (_df.artist_) o bien con la función col pasándole el nombre (_col('popularity')_)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.select('artist', 'track_name', 'popularity'\r\n",
							"    ).where(df.artist == 'Queen'\r\n",
							"    ).orderBy(col('popularity').desc(), \r\n",
							"    ).show(truncate=False)"
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Dado que los siguientes ejemplos son algo más complejos, se ha optado por usar directamente SQL. Para ello es necesario en primer lugar crear una vista temporar, en este caso llamada _spotify_."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createOrReplaceTempView('spotify')"
						],
						"outputs": [],
						"execution_count": 101
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Para esta consulta es necesario en primer lugar filtrar para quedarnos sólo con el género 'edm'. Al agrupar por artista se puede obtener la popularidad media por artista para establecer el orden descendente. Por último con _LIMIT_ podemos restringir el número de registros, aunque si sólo quisiéramos limitar a 5 a la hora de mostrar se le podría pasar el 5 a la función _show_."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"SELECT artist, AVG(popularity) popularity\r\n",
							"FROM spotify\r\n",
							"WHERE track_genre='edm'\r\n",
							"GROUP BY artist\r\n",
							"ORDER BY AVG(popularity) DESC\r\n",
							"LIMIT 5\"\"\").show()"
						],
						"outputs": [],
						"execution_count": 109
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"En este caso, para hacerlo en SQL es necesario hacer una consulta algo compleja. En primer lugar, hay que hacer una agrupación para obtener la popularidad media por artista y género. Tras esto, la forma más consistente para obtener el primer elemento de cada grupo (tras agrupar por género) es usar el método ROW_NUMBER() ordenado por popularidad (que es la popularidad media de la anterior query) y agrupada por género.\r\n",
							"\r\n",
							"Por último, basta con quedarse con las filas con _ROW_NUMBER==1_ (es decir, las primeras de cada género). Para este paso final se han usado de nuevo métodos en vez de código por comodidad (esto se puede hacer ya que el método SQL devuelve un dataframe con el resultado, por lo que se puede encadenar)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"\"\"\r\n",
							"    SELECT *,\r\n",
							"        ROW_NUMBER() OVER(PARTITION BY track_genre\r\n",
							"                        ORDER BY popularity DESC) AS rank\r\n",
							"    FROM (\r\n",
							"        SELECT artist,\r\n",
							"            track_genre,\r\n",
							"            AVG(popularity) popularity\r\n",
							"        FROM spotify\r\n",
							"        GROUP BY artist, track_genre\r\n",
							"        ORDER BY AVG(popularity) DESC\r\n",
							"    )\r\n",
							"\"\"\").select('artist', 'track_genre').where(col('rank') ==1).show(10000)"
						],
						"outputs": [],
						"execution_count": 115
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Workspace Users - PowerBI API')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0f41b194-ff18-4cfe-a330-41e9b2158939"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"import requests\r\n",
							"import json\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def safe_print(response):\r\n",
							"    print(response)\r\n",
							"    try:\r\n",
							"        print(json.dumps(response.json(), indent=4, sort_keys=False))\r\n",
							"    except:\r\n",
							"        pass"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Request access token"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIServPrincipalAPISecret')\r\n",
							"client_id = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
							"tenant_id = '89248974-515e-4d65-9469-ab424abfd2d2'"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={client_id}&client_secret={client_secret}'\r\n",
							"r = requests.post(f'https://login.microsoftonline.com/{tenant_id}/oauth2/token', data=body)\r\n",
							"access_token = r.json()['access_token']"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Parameters"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# groupId = 'e739b9de-1c90-46d3-a009-d999e83bc267'    # ISRI Workspace\r\n",
							"groupId = 'ac1176e8-1b38-40d3-91e4-3b8f5983aa5f'    # Portfolio Workspace"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Get workspace users list"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url=f'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/users'\r\n",
							"\r\n",
							"response = requests.get(url, headers={'Authorization':'Bearer ' + access_token})\r\n",
							"safe_print(response)"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Add user to workspace"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url=f'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/users'\r\n",
							"\r\n",
							"data = {\r\n",
							"  'UserEmailAddress': 'pablo.amian@datax.world',\r\n",
							"  'displayName': 'Testing API',\r\n",
							"  'groupUserAccessRight': 'Member'\r\n",
							"}\r\n",
							"\r\n",
							"response = requests.post(url, data, headers={'Authorization':'Bearer ' + access_token})\r\n",
							"safe_print(response)"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Refresh User Permissions (Apparently not needed)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url=f'https://api.powerbi.com/v1.0/myorg/RefreshUserPermissions'\r\n",
							"response = requests.post(url, headers={'Authorization':'Bearer ' + access_token})\r\n",
							"safe_print(response)\r\n",
							"# Last call done at 2022-06-01 14:03. Request cooldown time of 2h."
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Update User in workspace"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url=f'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/users'\r\n",
							"\r\n",
							"data = {\r\n",
							"  'UserEmailAddress': 'sebastian.tamayo@datax.world',\r\n",
							"  'groupUserAccessRight': 'Member',\r\n",
							"  'principalType': 'User',\r\n",
							"  'Identifier': 'sebastian.tamayo@datax.world'\r\n",
							"}\r\n",
							"\r\n",
							"response = requests.put(url, data, headers={'Authorization':'Bearer ' + access_token})\r\n",
							"safe_print(response)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Delete User in workspace"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"userToDelete = 'pablo.amian@datax.world'\r\n",
							"url=f'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/users/{userToDelete}'\r\n",
							"\r\n",
							"response = requests.delete(url, headers={'Authorization':'Bearer ' + access_token})\r\n",
							"safe_print(response)"
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "azure-storage-file-datalake\r\ngoogle-api-python-client\r\ngoogle-cloud-bigquery-storage\r\ngoogle-cloud-bigquery==1.25.0\r\nfacebook-business==12.0.0\r\ngoogle-cloud-storage\r\ngoogle-auth-httplib2\r\npandas\r\npython-adjust\r\noauth2client\r\ngoogle-auth\r\ngoogleads\r\nhttplib2\r\ncertifi\r\nadjusty\r\ngoogle\r\nrauth\r\nxlrd\r\ngspread\r\ngoogle-ads",
					"filename": "requirementsDataX (1) (1) (1).txt",
					"time": "2023-05-11T09:58:42.8841462Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataXDW')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}