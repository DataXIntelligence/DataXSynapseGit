{
	"name": "Azure Car ML",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "2716e7c4-5c39-4aa4-8585-3beefbb6c6f9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"import urllib.request\r\n",
					"import json\r\n",
					"import os\r\n",
					"import ssl\r\n",
					"import pandas as pd\r\n",
					"import numpy as np"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def allowSelfSignedHttps(allowed):\r\n",
					"    # bypass the server certificate verification on client side\r\n",
					"    if allowed and not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):\r\n",
					"        ssl._create_default_https_context = ssl._create_unverified_context\r\n",
					"\r\n",
					"allowSelfSignedHttps(True) # this line is needed if you use self-signed certificate in your scoring service.\r\n",
					"\r\n",
					"# Request data goes here\r\n",
					"# The example below assumes JSON formatting which may be updated\r\n",
					"# depending on the format your endpoint expects.\r\n",
					"# More information can be found here:\r\n",
					"# https://docs.microsoft.com/azure/machine-learning/how-to-deploy-advanced-entry-script\r\n",
					"data =  {\r\n",
					"  \"Inputs\": {\r\n",
					"    \"WebServiceInput0\": [\r\n",
					"      {\r\n",
					"        \"symboling\": 3,\r\n",
					"        \"normalized-losses\": \"5\",\r\n",
					"        \"make\": \"alfa-romero\",\r\n",
					"        \"fuel-type\": \"gas\",\r\n",
					"        \"aspiration\": \"std\",\r\n",
					"        \"num-of-doors\": \"two\",\r\n",
					"        \"body-style\": \"convertible\",\r\n",
					"        \"drive-wheels\": \"rwd\",\r\n",
					"        \"engine-location\": \"front\",\r\n",
					"        \"wheel-base\": 88.6,\r\n",
					"        \"length\": 168.8,\r\n",
					"        \"width\": 64.1,\r\n",
					"        \"height\": 48.8,\r\n",
					"        \"curb-weight\": 2548,\r\n",
					"        \"engine-type\": \"dohc\",\r\n",
					"        \"num-of-cylinders\": \"four\",\r\n",
					"        \"engine-size\": 130,\r\n",
					"        \"fuel-system\": \"mpfi\",\r\n",
					"        \"bore\": 3.47,\r\n",
					"        \"stroke\": 2.68,\r\n",
					"        \"compression-ratio\": 9.0,\r\n",
					"        \"horsepower\": 9.0,\r\n",
					"        \"peak-rpm\": 9.0,\r\n",
					"        \"city-mpg\": 21,\r\n",
					"        \"highway-mpg\": 27,\r\n",
					"        \"price\": 9.0,\r\n",
					"        \"__index_level_0__\": 0\r\n",
					"      },\r\n",
					"      {\r\n",
					"        \"symboling\": 3,\r\n",
					"        \"normalized-losses\": \"5\",\r\n",
					"        \"make\": \"alfa-romero\",\r\n",
					"        \"fuel-type\": \"gas\",\r\n",
					"        \"aspiration\": \"std\",\r\n",
					"        \"num-of-doors\": \"two\",\r\n",
					"        \"body-style\": \"convertible\",\r\n",
					"        \"drive-wheels\": \"rwd\",\r\n",
					"        \"engine-location\": \"front\",\r\n",
					"        \"wheel-base\": 88.6,\r\n",
					"        \"length\": 168.8,\r\n",
					"        \"width\": 64.1,\r\n",
					"        \"height\": 48.8,\r\n",
					"        \"curb-weight\": 2548,\r\n",
					"        \"engine-type\": \"dohc\",\r\n",
					"        \"num-of-cylinders\": \"four\",\r\n",
					"        \"engine-size\": 130,\r\n",
					"        \"fuel-system\": \"mpfi\",\r\n",
					"        \"bore\": 3.47,\r\n",
					"        \"stroke\": 2.68,\r\n",
					"        \"compression-ratio\": 9.0,\r\n",
					"        \"horsepower\": 9.0,\r\n",
					"        \"peak-rpm\": 9.0,\r\n",
					"        \"city-mpg\": 21,\r\n",
					"        \"highway-mpg\": 27,\r\n",
					"        \"price\": 9.0,\r\n",
					"        \"__index_level_0__\": 1\r\n",
					"      },\r\n",
					"      {\r\n",
					"        \"symboling\": 1,\r\n",
					"        \"normalized-losses\": \"5\",\r\n",
					"        \"make\": \"alfa-romero\",\r\n",
					"        \"fuel-type\": \"gas\",\r\n",
					"        \"aspiration\": \"std\",\r\n",
					"        \"num-of-doors\": \"two\",\r\n",
					"        \"body-style\": \"hatchback\",\r\n",
					"        \"drive-wheels\": \"rwd\",\r\n",
					"        \"engine-location\": \"front\",\r\n",
					"        \"wheel-base\": 94.5,\r\n",
					"        \"length\": 171.2,\r\n",
					"        \"width\": 65.5,\r\n",
					"        \"height\": 52.4,\r\n",
					"        \"curb-weight\": 2823,\r\n",
					"        \"engine-type\": \"ohcv\",\r\n",
					"        \"num-of-cylinders\": \"six\",\r\n",
					"        \"engine-size\": 152,\r\n",
					"        \"fuel-system\": \"mpfi\",\r\n",
					"        \"bore\": 2.68,\r\n",
					"        \"stroke\": 3.47,\r\n",
					"        \"compression-ratio\": 9.0,\r\n",
					"        \"horsepower\": 9.0,\r\n",
					"        \"peak-rpm\": 9.0,\r\n",
					"        \"city-mpg\": 19,\r\n",
					"        \"highway-mpg\": 26,\r\n",
					"        \"price\": 9.0,\r\n",
					"        \"__index_level_0__\": 2\r\n",
					"      },\r\n",
					"      {\r\n",
					"        \"symboling\": 2,\r\n",
					"        \"normalized-losses\": 9.0,\r\n",
					"        \"make\": \"audi\",\r\n",
					"        \"fuel-type\": \"gas\",\r\n",
					"        \"aspiration\": \"std\",\r\n",
					"        \"num-of-doors\": \"four\",\r\n",
					"        \"body-style\": \"sedan\",\r\n",
					"        \"drive-wheels\": \"fwd\",\r\n",
					"        \"engine-location\": \"front\",\r\n",
					"        \"wheel-base\": 99.8,\r\n",
					"        \"length\": 176.6,\r\n",
					"        \"width\": 66.2,\r\n",
					"        \"height\": 54.3,\r\n",
					"        \"curb-weight\": 2337,\r\n",
					"        \"engine-type\": \"ohc\",\r\n",
					"        \"num-of-cylinders\": \"four\",\r\n",
					"        \"engine-size\": 109,\r\n",
					"        \"fuel-system\": \"mpfi\",\r\n",
					"        \"bore\": 3.19,\r\n",
					"        \"stroke\": 3.4,\r\n",
					"        \"compression-ratio\": 9.0,\r\n",
					"        \"horsepower\": 9.0,\r\n",
					"        \"peak-rpm\": 9.0,\r\n",
					"        \"city-mpg\": 24,\r\n",
					"        \"highway-mpg\": 30,\r\n",
					"        \"price\": 9.0,\r\n",
					"        \"__index_level_0__\": 3\r\n",
					"      },\r\n",
					"      {\r\n",
					"        \"symboling\": 2,\r\n",
					"        \"normalized-losses\": 9.0,\r\n",
					"        \"make\": \"audi\",\r\n",
					"        \"fuel-type\": \"gas\",\r\n",
					"        \"aspiration\": \"std\",\r\n",
					"        \"num-of-doors\": \"four\",\r\n",
					"        \"body-style\": \"sedan\",\r\n",
					"        \"drive-wheels\": \"4wd\",\r\n",
					"        \"engine-location\": \"front\",\r\n",
					"        \"wheel-base\": 99.4,\r\n",
					"        \"length\": 176.6,\r\n",
					"        \"width\": 66.4,\r\n",
					"        \"height\": 54.3,\r\n",
					"        \"curb-weight\": 2824,\r\n",
					"        \"engine-type\": \"ohc\",\r\n",
					"        \"num-of-cylinders\": \"five\",\r\n",
					"        \"engine-size\": 136,\r\n",
					"        \"fuel-system\": \"mpfi\",\r\n",
					"        \"bore\": 3.19,\r\n",
					"        \"stroke\": 3.4,\r\n",
					"        \"compression-ratio\": 9.0,\r\n",
					"        \"horsepower\": 9.0,\r\n",
					"        \"peak-rpm\": 9.0,\r\n",
					"        \"city-mpg\": 18,\r\n",
					"        \"highway-mpg\": 22,\r\n",
					"        \"price\": 9.0,\r\n",
					"        \"__index_level_0__\": 4\r\n",
					"      }\r\n",
					"    ]\r\n",
					"  },\r\n",
					"  \"GlobalParameters\": {}\r\n",
					"}\r\n",
					"\r\n",
					"body = str.encode(json.dumps(data))\r\n",
					"\r\n",
					"url = 'http://21ba74d8-80f5-43c5-bd66-8de60fcb8fca.westeurope.azurecontainer.io/score'\r\n",
					"# Replace this with the primary/secondary key or AMLToken for the endpoint\r\n",
					"api_key = 'uogNQ8f8ROSFgXy8PWSWbNyjaZiJfUim'\r\n",
					"if not api_key:\r\n",
					"    raise Exception(\"A key should be provided to invoke the endpoint\")\r\n",
					"\r\n",
					"\r\n",
					"headers = {'Content-Type':'application/json', 'Authorization':('Bearer '+ api_key)}\r\n",
					"\r\n",
					"req = urllib.request.Request(url, body, headers)\r\n",
					"\r\n",
					"try:\r\n",
					"    response = urllib.request.urlopen(req)\r\n",
					"\r\n",
					"    result = response.read()\r\n",
					"    print(result)\r\n",
					"except urllib.error.HTTPError as error:\r\n",
					"    print(\"The request failed with status code: \" + str(error.code))\r\n",
					"\r\n",
					"    # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure\r\n",
					"    print(error.info())\r\n",
					"    print(error.read().decode(\"utf8\", 'ignore'))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"obj = json.loads(result.decode('utf-8'))\r\n",
					"df = pd.DataFrame.from_records(obj[\"Results\"][\"WebServiceOutput0\"])\r\n",
					"print(df)"
				],
				"execution_count": 16
			}
		]
	}
}