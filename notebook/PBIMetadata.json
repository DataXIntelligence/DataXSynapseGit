{
	"name": "PBIMetadata",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "36c88b77-c195-4118-9af2-a7027f84ea6d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Imports"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"import requests \r\n",
					"from requests.structures import CaseInsensitiveDict\r\n",
					"import json\r\n",
					"import pandas as pd\r\n",
					"from datetime import datetime, timezone, timedelta"
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def safe_print(response):\r\n",
					"    print(response)\r\n",
					"    try:\r\n",
					"        print(json.dumps(response.json(), indent=4, sort_keys=False))\r\n",
					"    except:\r\n",
					"        pass"
				],
				"execution_count": 112
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Credentials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"client_id = '0ab236de-0088-4311-bd50-11fa6b38c323'\r\n",
					"tenant_id = '89248974-515e-4d65-9469-ab424abfd2d2'\r\n",
					"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIMetadataClientSecret')\r\n",
					"account_password = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIMetadataClientUserAndPassword')"
				],
				"execution_count": 113
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"body = f'client_id={client_id}&grant_type=password&resource=https%3A%2F%2Fanalysis.windows.net%2Fpowerbi%2Fapi&{account_password}'\r\n",
					"r = requests.post(f'https://login.microsoftonline.com/{tenant_id}/oauth2/token', data=body)\r\n",
					"access_token = r.json()['access_token']\r\n",
					"\r\n",
					"headers = CaseInsensitiveDict()\r\n",
					"headers[\"Authorization\"] = \"Bearer \" + access_token"
				],
				"execution_count": 114
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Workspaces(Groups)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"url = \"https://api.powerbi.com/v1.0/myorg/groups\"\r\n",
					"\r\n",
					"resp = requests.get(url, headers=headers)\r\n",
					"#safe_print(resp)\r\n",
					"obj = resp.json()\r\n",
					"\r\n",
					"groups_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/Groups.csv\", groups_df.to_csv(index=False), True)\r\n",
					"print(groups_df.head())"
				],
				"execution_count": 115
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Resources (Datasets, Dataflows and Reports)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_df = pd.DataFrame()\r\n",
					"types = [\"datasets\", \"dataflows\", \"reports\"]\r\n",
					"for group in groups_df[\"id\"]:\r\n",
					"    group = str(group)\r\n",
					"    for _type in types:\r\n",
					"        url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
					"        url += group + \"/\" + _type\r\n",
					"        resp = requests.get(url, headers=headers)\r\n",
					"        obj = resp.json()\r\n",
					"        new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"        new_df[\"group_id\"] = group\r\n",
					"        new_df[\"type\"] = _type[:-1]\r\n",
					"        if _type == \"dataflows\":\r\n",
					"            if 'objectId' in new_df.columns:\r\n",
					"                new_df[\"id\"] = new_df[\"objectId\"]\r\n",
					"        data_df = pd.concat([data_df,new_df],ignore_index=True)\r\n",
					"\r\n",
					"print(data_df.shape)\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/Resources.csv\", data_df.to_csv(index=False), True)"
				],
				"execution_count": 116
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Report pages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"report_df = data_df[data_df[\"type\"] == \"report\"]\r\n",
					"pages_df = pd.DataFrame()\r\n",
					"for id_ in report_df[\"id\"]:\r\n",
					"    group = report_df[report_df[\"id\"] == id_][\"group_id\"].iloc[0]\r\n",
					"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
					"    url += group + \"/reports/\" + id_ + \"/pages\"\r\n",
					"    resp = requests.get(url, headers=headers)\r\n",
					"    obj = resp.json()\r\n",
					"    new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"    new_df[\"report_id\"] = id_\r\n",
					"    new_df[\"group_id\"] = group\r\n",
					"    pages_df = pd.concat([pages_df,new_df],ignore_index=True)\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/ReportPages.csv\", pages_df.to_csv(index=False), True)\r\n",
					"print(pages_df.shape)"
				],
				"execution_count": 117
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Datasources\r\n",
					"\r\n",
					"API only allows getDatasource calls on datasets, dataflows and RDL(paginated reports). Standard reports don't support getDatasource calls."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"datasources_df = pd.DataFrame()\r\n",
					"for id_ in data_df[\"id\"]:\r\n",
					"    group = data_df[data_df[\"id\"] == id_][\"group_id\"].iloc[0]\r\n",
					"    resource = data_df[data_df[\"id\"] == id_][\"type\"].iloc[0] + \"s\"\r\n",
					"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
					"    url += group + \"/\" + resource + \"/\" + id_ + \"/\" + \"datasources\"\r\n",
					"    resp = requests.get(url, headers=headers)\r\n",
					"    obj = resp.json()\r\n",
					"    new_df = pd.DataFrame()\r\n",
					"    if \"value\" in obj.keys():\r\n",
					"        if len(obj[\"value\"]) > 0:\r\n",
					"            new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"            new_df[\"resource_id\"] = id_\r\n",
					"            new_df[\"group_id\"] = group\r\n",
					"            new_df[\"resource_type\"] = resource[:-1]\r\n",
					"            new_df[\"id\"] = new_df[\"datasourceId\"]\r\n",
					"            new_df = pd.concat([new_df.drop(['connectionDetails'], axis=1), new_df['connectionDetails'].apply(pd.Series)], axis=1)\r\n",
					"    datasources_df = pd.concat([datasources_df,new_df],ignore_index=True)\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/Datasources.csv\", datasources_df.to_csv(index=False), True)\r\n",
					"print(datasources_df.shape)"
				],
				"execution_count": 119
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Refresh History(dataflows and datasets)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"refresh_df = pd.DataFrame()\r\n",
					"datasets_dataflows = data_df[(data_df['type'] == 'dataset') | (data_df['type'] == 'dataflow')]\r\n",
					"for id_ in datasets_dataflows[\"id\"]:\r\n",
					"    group = datasets_dataflows[datasets_dataflows[\"id\"] == id_][\"group_id\"].iloc[0]\r\n",
					"    type_ = datasets_dataflows[datasets_dataflows[\"id\"] == id_][\"type\"].iloc[0] + \"s\"\r\n",
					"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
					"    url += group + \"/\" + type_ + \"/\" + id_ + \"/\"\r\n",
					"    if type_ == \"datasets\":\r\n",
					"        url += \"refreshes\"\r\n",
					"    else:\r\n",
					"        url += \"transactions\"\r\n",
					"    resp = requests.get(url, headers=headers)\r\n",
					"    obj = resp.json()\r\n",
					"    new_df = pd.DataFrame()\r\n",
					"    new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"    new_df[\"resource_id\"] = id_\r\n",
					"    new_df[\"group_id\"] = group\r\n",
					"    new_df[\"resource_type\"] = type_[:-1]\r\n",
					"    refresh_df = pd.concat([refresh_df,new_df],ignore_index=True)\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/RefreshHistory.csv\", refresh_df.to_csv(index=False), True)\r\n",
					"print(refresh_df.shape)"
				],
				"execution_count": 120
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Imports\r\n",
					"\r\n",
					"Adding import name to data dataframe for resources created when importing .pbix files"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"imports_df = pd.DataFrame()\r\n",
					"for group in groups_df[\"id\"]:\r\n",
					"    group = str(group)\r\n",
					"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
					"    url += group + \"/\" + \"imports\"\r\n",
					"    resp = requests.get(url, headers=headers)\r\n",
					"    obj = resp.json()\r\n",
					"    if \"value\" in obj.keys():\r\n",
					"        new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"        new_df[\"group_id\"] = group\r\n",
					"        imports_df = pd.concat([imports_df,new_df],ignore_index=True)\r\n",
					"\r\n",
					"data_df[\"import_name\"] = \"\"\r\n",
					"\r\n",
					"#mssparkutils.fs.put(\"/PBIMetadata/Imports.csv\", imports_df.to_csv(index=False), True)"
				],
				"execution_count": 121
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for id_ in imports_df[\"id\"]:\r\n",
					"    name = imports_df[imports_df[\"id\"] == id_][\"name\"].iloc[0]\r\n",
					"    datasets = imports_df[imports_df[\"id\"] == id_][\"datasets\"].iloc[0]\r\n",
					"    reports = imports_df[imports_df[\"id\"] == id_][\"reports\"].iloc[0]\r\n",
					"    dataflows = imports_df[imports_df[\"id\"] == id_][\"dataflows\"].iloc[0]\r\n",
					"    for dataset in datasets:\r\n",
					"        data_df.loc[data_df[\"id\"] == dataset[\"id\"], \"import_name\"] = name\r\n",
					"        data_df.loc[data_df[\"id\"] == dataset[\"id\"], \"isFromPbix\"] = \"TRUE\"\r\n",
					"    for report in reports:\r\n",
					"        data_df.loc[data_df[\"id\"] == report[\"id\"], \"import_name\"] = name\r\n",
					"        data_df.loc[data_df[\"id\"] == report[\"id\"], \"isFromPbix\"] = \"TRUE\"\r\n",
					"    for dataflow in dataflows:\r\n",
					"        data_df.loc[data_df[\"id\"] == dataflow[\"id\"], \"import_name\"] = name\r\n",
					"        data_df.loc[data_df[\"id\"] == dataflow[\"id\"], \"isFromPbix\"] = \"TRUE\"\r\n",
					"#print(data_df[data_df[\"import_name\"] != \"\"])\r\n",
					"data_df.loc[data_df[\"isFromPbix\"] != \"TRUE\", \"isFromPbix\"] = \"FALSE\"\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/Resources.csv\", data_df.to_csv(index=False), True)"
				],
				"execution_count": 122
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Users \r\n",
					"The number of times a user is in the table is the same as the number of workspaces the user belongs to"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"users_df = pd.DataFrame()\r\n",
					"for group in groups_df[\"id\"]:\r\n",
					"    group = str(group)\r\n",
					"    url = \"https://api.powerbi.com/v1.0/myorg/groups/\"\r\n",
					"    url += group + \"/users\"\r\n",
					"    resp = requests.get(url, headers=headers)\r\n",
					"    obj = resp.json()\r\n",
					"    new_df = pd.DataFrame.from_records(obj[\"value\"])\r\n",
					"    new_df[\"group_id\"] = group\r\n",
					"    users_df = pd.concat([users_df,new_df],ignore_index=True)\r\n",
					"\r\n",
					"print(users_df.shape)\r\n",
					"#print(users_df)\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/Users.csv\", users_df.to_csv(index=False), True)"
				],
				"execution_count": 123
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Activity Events"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"client_secret = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'PBIServPrincipalAPISecret')\r\n",
					"client_id = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
					"tenant_id = '89248974-515e-4d65-9469-ab424abfd2d2'"
				],
				"execution_count": 126
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={client_id}&client_secret={client_secret}'\r\n",
					"r = requests.post(f'https://login.microsoftonline.com/{tenant_id}/oauth2/token', data=body)\r\n",
					"access_token = r.json()['access_token']\r\n",
					"\r\n",
					"headers = CaseInsensitiveDict()\r\n",
					"headers[\"Authorization\"] = \"Bearer \" + access_token"
				],
				"execution_count": 127
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dates = []\r\n",
					"dates.append(datetime.now())\r\n",
					"activity_events_df = pd.DataFrame()\r\n",
					"for i in range(1,29):\r\n",
					"    dates.append(datetime.now() - timedelta(i))\r\n",
					"for date in dates:\r\n",
					"    # print(date.strftime(f\"%Y-%m-%dT00:00:00Z\"))\r\n",
					"    # print(date.strftime(f\"%Y-%m-%dT23:59:59Z\"))\r\n",
					"    startTime = date.strftime(f\"%Y-%m-%dT00:00:00Z\")\r\n",
					"    endTime = date.strftime(f\"%Y-%m-%dT23:59:59Z\")\r\n",
					"\r\n",
					"    url = f\"https://api.powerbi.com/v1.0/myorg/admin/activityevents?startDateTime='{startTime}'&endDateTime='{endTime}'\"\r\n",
					"\r\n",
					"    resp = requests.get(url, headers=headers)\r\n",
					"    #safe_print(resp)\r\n",
					"    obj = resp.json()\r\n",
					"\r\n",
					"    new_df = pd.DataFrame.from_records(obj[\"activityEventEntities\"])\r\n",
					"    activity_events_df = pd.concat([activity_events_df,new_df],ignore_index=True)\r\n",
					"\r\n",
					"    while(not obj[\"lastResultSet\"]):\r\n",
					"        url = obj[\"continuationUri\"]\r\n",
					"        resp = requests.get(url, headers=headers)\r\n",
					"        obj = resp.json()\r\n",
					"\r\n",
					"        new_df = pd.DataFrame.from_records(obj[\"activityEventEntities\"])\r\n",
					"        activity_events_df = pd.concat([activity_events_df,new_df],ignore_index=True)\r\n",
					"print(activity_events_df.shape)\r\n",
					"mssparkutils.fs.put(\"/PBIMetadata/ActivityEvents.csv\", activity_events_df.to_csv(index=False), True)"
				],
				"execution_count": 128
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(activity_events_df[~activity_events_df[\"ArtifactName\"].isnull()][\"ArtifactId\"])\r\n",
					"#Relciones: DataflowId, DatasourceId, DatasetId"
				],
				"execution_count": 139
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}